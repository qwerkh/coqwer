{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/medicineBarcode.vue","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/medicineBarcode.vue","filename":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/medicineBarcode.vue","passPerPreset":false,"envName":"development","cwd":"/home/snr/Desktop/Project/cosmetic","root":"/home/snr/Desktop/Project/cosmetic","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/medicineBarcode.vue","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/medicineBarcode.vue"}},"code":"module.exportDefault({\n  data: function () {\n    return {\n      medicineBarcodeReport: {\n        roleBranchOptionsModel: [],\n        roleAreaOptionsModel: []\n      },\n      inl: true,\n      roleBranchOptions: [],\n      roleAreaOptions: [],\n      patientOptions: [],\n      typeOptions: [],\n      exchangeOptions: [],\n      dateRange: \"\",\n      activeName: \"1\",\n      medicineBarcodesData: {},\n      loading: false,\n      companyName: \"\",\n      companyEnName: \"\",\n      addressName: \"\",\n      branchHeader: \"All\",\n      dateRangeHeader: \"All\",\n      pickerOptions2: {\n        shortcuts: [{\n          text: 'Last week',\n          onClick: function (picker) {\n            var end = new Date();\n            var start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: 'Last month',\n          onClick: function (picker) {\n            var end = new Date();\n            var start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: 'Last 3 months',\n          onClick: function (picker) {\n            var end = new Date();\n            var start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\n            picker.$emit('pick', [start, end]);\n          }\n        }]\n      },\n      printLoading: false\n    };\n  },\n  methods: {\n    fetchBranchOption: function () {\n      var _this = this;\n\n      Meteor.call(\"fetchRolesBranch\", Meteor.userId(), function (err, result) {\n        _this.roleBranchOptions = result;\n      });\n    },\n    fetchAreaOption: function (val) {\n      var _this2 = this;\n\n      Meteor.call(\"fetchRolesAreaByMultiRoleBranch\", Meteor.userId(), val, function (err, result) {\n        _this2.roleAreaOptions = result;\n      });\n    },\n    fetchPatientOption: function (val) {\n      var _this3 = this;\n\n      Meteor.call(\"fetchPatientOption\", val, function (err, result) {\n        _this3.patientOptions = result;\n      });\n    },\n    fetchExchangeOption: function () {\n      var _this4 = this;\n\n      Meteor.call(\"fetchExchangeOption\", function (err, result) {\n        _this4.exchangeOptions = result;\n      });\n    },\n    fetchTypeOption: function () {\n      var list = [];\n      list.push({\n        label: \"Active\",\n        value: \"Active\"\n      });\n      list.push({\n        label: \"Partial\",\n        value: \"Partial\"\n      });\n      list.push({\n        label: \"Complete\",\n        value: \"Complete\"\n      });\n      this.typeOptions = list;\n    },\n    handleRunReport: function (formName) {\n      var _this5 = this;\n\n      var params = {};\n      var userId = Meteor.userId();\n      this.loading = true;\n\n      if (this.medicineBarcodeReport.roleAreaOptionsModel != \"\") {\n        params.rolesArea = {\n          $in: this.medicineBarcodeReport.roleAreaOptionsModel\n        };\n        Meteor.call(\"getBranchHeader\", this.medicineBarcodeReport.roleAreaOptionsModel, function (err, result) {\n          _this5.branchHeader = result;\n        });\n      }\n\n      if (this.medicineBarcodeReport.dateRange != \"\") {\n        params.medicineBarcodeDate = {\n          $gte: moment(this.medicineBarcodeReport.dateRange[0]).startOf(\"days\").toDate(),\n          $lte: moment(this.medicineBarcodeReport.dateRange[1]).endOf(\"days\").toDate()\n        };\n        this.dateRangeHeader = moment(this.medicineBarcodeReport.dateRange[0]).format(\"DD/MM/YYYY\") + \"-\" + moment(this.medicineBarcodeReport.dateRange[1]).format(\"DD/MM/YYYY\");\n      }\n\n      if (this.medicineBarcodeReport.patientOptionsModel != \"\") {\n        params.patientId = {\n          $in: this.medicineBarcodeReport.patientOptionsModel\n        };\n      }\n\n      if (this.medicineBarcodeReport.typeOptionsModel != \"\") {\n        params.status = {\n          $in: this.medicineBarcodeReport.typeOptionsModel\n        };\n      }\n\n      Meteor.call('giveMeRegisterReport', params, userId, function (err, result) {\n        if (!err) {\n          _this5.medicineBarcodesData = result;\n        }\n\n        _this5.loading = false;\n      });\n    },\n    getCompany: function () {\n      var _this6 = this;\n\n      Meteor.call(\"getCompany\", function (err, result) {\n        if (!err) {\n          _this6.companyName = result.khName;\n          _this6.companyEnName = result.enName;\n          _this6.addressName = result.khAddress;\n        }\n      });\n    },\n    getSummariesRegister: function (param) {\n      var columns = param.columns,\n          data = param.data;\n      var sums = [];\n      columns.forEach(function (column, index) {\n        if (index === 0) {\n          sums[index] = 'Total';\n          return;\n        }\n\n        var values = data.map(function (item) {\n          return Number(numeral().unformat(item[column.property]));\n        });\n\n        if (!values.every(function (value) {\n          return isNaN(value);\n        }) && index > 3) {\n          sums[index] = values.reduce(function (prev, curr) {\n            var value = Number(curr);\n\n            if (!isNaN(value)) {\n              return prev + curr;\n            } else {\n              return prev;\n            }\n          }, 0);\n          sums[index] = numeral(sums[index]).format(\"0,00.000\");\n        } else {\n          sums[index] = 'N/A';\n        }\n      });\n      return sums;\n    },\n\n    /* exportToExcel(){\n     Meteor.call('giveMeRegisterReport', this.medicineBarcodesData, (err, workbookBuffer) => {\n     if (!err) {\n     //call mixin saveAs from '/imports/api/mixins/file-saver-fn.js'\n     this.saveAs(workbookBuffer, 'RegisterReport');\n     }\n     })\n     },*/\n    PrintReport: function () {\n      window.print();\n    }\n  },\n  watch: {\n    \"medicineBarcodeReport.roleBranchOptionsModel\": function (val) {\n      this.fetchAreaOption(val);\n    },\n    \"medicineBarcodeReport.roleAreaOptionsModel\": function (val) {\n      this.fetchPatientOption(val);\n    }\n  },\n  created: function () {\n    this.fetchBranchOption(); //            this.fetchPatientOption([]);\n\n    this.fetchTypeOption([]);\n    this.getCompany();\n    this.medicineBarcodeReport.dateRange = [moment().startOf(\"months\").toDate(), moment().endOf(\"months\").toDate()];\n  },\n  computed: {\n    dataExist: function () {\n      return this.medicineBarcodesData && this.medicineBarcodesData.data && this.medicineBarcodesData.data.length > 0;\n    }\n  }\n});","map":{"version":3,"sources":["/home/snr/Desktop/Project/cosmetic/imports/vue/ui/medicineBarcode.vue"],"names":["module","exportDefault","data","medicineBarcodeReport","roleBranchOptionsModel","roleAreaOptionsModel","inl","roleBranchOptions","roleAreaOptions","patientOptions","typeOptions","exchangeOptions","dateRange","activeName","medicineBarcodesData","loading","companyName","companyEnName","addressName","branchHeader","dateRangeHeader","pickerOptions2","shortcuts","text","onClick","picker","end","Date","start","setTime","getTime","$emit","printLoading","methods","fetchBranchOption","Meteor","call","userId","err","result","fetchAreaOption","val","fetchPatientOption","fetchExchangeOption","fetchTypeOption","list","push","label","value","handleRunReport","formName","params","rolesArea","$in","medicineBarcodeDate","$gte","moment","startOf","toDate","$lte","endOf","format","patientOptionsModel","patientId","typeOptionsModel","status","getCompany","khName","enName","khAddress","getSummariesRegister","param","columns","sums","forEach","column","index","values","map","item","Number","numeral","unformat","property","every","isNaN","reduce","prev","curr","PrintReport","window","print","watch","created","computed","dataExist","length"],"mappings":"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","sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    export default {\n        data() {\n            return {\n                medicineBarcodeReport: {\n                    roleBranchOptionsModel: [],\n                    roleAreaOptionsModel: [],\n                },\n                inl: true,\n                roleBranchOptions: [],\n                roleAreaOptions: [],\n                patientOptions: [],\n                typeOptions: [],\n\n                exchangeOptions: [],\n                dateRange: \"\",\n                activeName: \"1\",\n                medicineBarcodesData: {},\n                loading: false,\n\n                companyName: \"\",\n                companyEnName: \"\",\n                addressName: \"\",\n\n                branchHeader: \"All\",\n                dateRangeHeader: \"All\",\n                pickerOptions2: {\n                    shortcuts: [{\n                        text: 'Last week',\n                        onClick(picker) {\n                            const end = new Date();\n                            const start = new Date();\n                            start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);\n                            picker.$emit('pick', [start, end]);\n                        }\n                    }, {\n                        text: 'Last month',\n                        onClick(picker) {\n                            const end = new Date();\n                            const start = new Date();\n                            start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\n                            picker.$emit('pick', [start, end]);\n                        }\n                    }, {\n                        text: 'Last 3 months',\n                        onClick(picker) {\n                            const end = new Date();\n                            const start = new Date();\n                            start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\n                            picker.$emit('pick', [start, end]);\n                        }\n                    }]\n                },\n                printLoading: false,\n            }\n        },\n        methods: {\n            fetchBranchOption() {\n                Meteor.call(\"fetchRolesBranch\", Meteor.userId(), (err, result) => {\n                    this.roleBranchOptions = result;\n                })\n            },\n            fetchAreaOption(val) {\n                Meteor.call(\"fetchRolesAreaByMultiRoleBranch\", Meteor.userId(), val, (err, result) => {\n                    this.roleAreaOptions = result;\n                })\n            },\n            fetchPatientOption(val) {\n                Meteor.call(\"fetchPatientOption\", val, (err, result) => {\n                    this.patientOptions = result;\n                })\n            },\n            fetchExchangeOption() {\n                Meteor.call(\"fetchExchangeOption\", (err, result) => {\n                    this.exchangeOptions = result;\n                })\n            },\n            fetchTypeOption() {\n                let list = [];\n                list.push({label: \"Active\", value: \"Active\"});\n                list.push({label: \"Partial\", value: \"Partial\"});\n                list.push({label: \"Complete\", value: \"Complete\"});\n\n                this.typeOptions = list;\n            },\n\n            handleRunReport(formName) {\n\n                let params = {};\n                let userId = Meteor.userId();\n\n                this.loading = true;\n                if (this.medicineBarcodeReport.roleAreaOptionsModel != \"\") {\n                    params.rolesArea = {$in: this.medicineBarcodeReport.roleAreaOptionsModel};\n\n                    Meteor.call(\"getBranchHeader\", this.medicineBarcodeReport.roleAreaOptionsModel, (err, result) => {\n                        this.branchHeader = result;\n                    })\n                }\n\n                if (this.medicineBarcodeReport.dateRange != \"\") {\n                    params.medicineBarcodeDate = {\n                        $gte: moment(this.medicineBarcodeReport.dateRange[0]).startOf(\"days\").toDate(),\n                        $lte: moment(this.medicineBarcodeReport.dateRange[1]).endOf(\"days\").toDate()\n                    };\n\n                    this.dateRangeHeader = moment(this.medicineBarcodeReport.dateRange[0]).format(\"DD/MM/YYYY\") + \"-\" + moment(this.medicineBarcodeReport.dateRange[1]).format(\"DD/MM/YYYY\");\n                }\n\n                if (this.medicineBarcodeReport.patientOptionsModel != \"\") {\n                    params.patientId = {$in: this.medicineBarcodeReport.patientOptionsModel};\n                }\n\n                if (this.medicineBarcodeReport.typeOptionsModel != \"\") {\n                    params.status = {$in: this.medicineBarcodeReport.typeOptionsModel};\n                }\n\n\n                Meteor.call('giveMeRegisterReport', params, userId, (err, result) => {\n                    if (!err) {\n                        this.medicineBarcodesData = result;\n                    }\n                    this.loading = false;\n                });\n\n\n            },\n            getCompany() {\n                Meteor.call(\"getCompany\", (err, result) => {\n                    if (!err) {\n                        this.companyName = result.khName;\n                        this.companyEnName = result.enName;\n                        this.addressName = result.khAddress;\n                    }\n                })\n\n            },\n\n            getSummariesRegister(param) {\n                const {columns, data} = param;\n                const sums = [];\n                columns.forEach((column, index) => {\n                    if (index === 0) {\n                        sums[index] = 'Total';\n                        return;\n                    }\n                    const values = data.map(item => Number(numeral().unformat(item[column.property])));\n                    if (!values.every(value => isNaN(value)) && index > 3) {\n                        sums[index] = values.reduce((prev, curr) => {\n                            const value = Number(curr);\n                            if (!isNaN(value)) {\n                                return prev + curr;\n                            } else {\n                                return prev;\n                            }\n                        }, 0);\n                        sums[index] = numeral(sums[index]).format(\"0,00.000\");\n                    } else {\n                        sums[index] = 'N/A';\n                    }\n                });\n\n                return sums;\n            },\n            /* exportToExcel(){\n             Meteor.call('giveMeRegisterReport', this.medicineBarcodesData, (err, workbookBuffer) => {\n             if (!err) {\n             //call mixin saveAs from '/imports/api/mixins/file-saver-fn.js'\n             this.saveAs(workbookBuffer, 'RegisterReport');\n             }\n             })\n             },*/\n            PrintReport() {\n                window.print();\n            }\n        },\n        watch: {\n\n\n            \"medicineBarcodeReport.roleBranchOptionsModel\"(val) {\n                this.fetchAreaOption(val);\n            }\n            ,\n            \"medicineBarcodeReport.roleAreaOptionsModel\"(val) {\n                this.fetchPatientOption(val);\n            }\n\n        },\n        created() {\n            this.fetchBranchOption();\n//            this.fetchPatientOption([]);\n            this.fetchTypeOption([]);\n            this.getCompany();\n            this.medicineBarcodeReport.dateRange = [moment().startOf(\"months\").toDate(), moment().endOf(\"months\").toDate()];\n\n\n        },\n        computed: {\n            dataExist() {\n                return this.medicineBarcodesData && this.medicineBarcodesData.data && this.medicineBarcodesData.data.length > 0;\n            }\n        },\n\n    }\n"]},"sourceType":"script","hash":"720b22d3d7f6ec24fe7103f6e9c002ff4ccf4918"}
