{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/medicineBarcode.vue","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/medicineBarcode.vue","filename":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/medicineBarcode.vue","passPerPreset":false,"envName":"development","cwd":"/home/snr/Desktop/Project/cosmetic","root":"/home/snr/Desktop/Project/cosmetic","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/medicineBarcode.vue","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/medicineBarcode.vue"}},"code":"var MedicineBarcode;\nmodule.link(\"../component/barcode\", {\n  \"default\": function (v) {\n    MedicineBarcode = v;\n  }\n}, 0);\nmodule.exportDefault({\n  components: {\n    \"barcode\": MedicineBarcode\n  },\n  data: function () {\n    return {\n      medicineBarcodeReport: {\n        roleBranchOptionsModel: [],\n        roleAreaOptionsModel: [],\n        medicineBarcodeReport: \"\",\n        medicineTypeModel: \"\"\n      },\n      inl: true,\n      roleBranchOptions: [],\n      roleAreaOptions: [],\n      medicineOption: [],\n      medicineTypeOption: [],\n      activeName: \"1\",\n      medicineBarcodesData: {},\n      loading: false,\n      branchHeader: \"All\",\n      printLoading: false,\n      isChooseMedicine: false,\n      rules: {\n        medicineTypeModel: [{\n          required: true,\n          message: 'Please input Medicine Type',\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  methods: {\n    fetchBranchOption: function () {\n      var _this = this;\n\n      Meteor.call(\"fetchRolesBranch\", Meteor.userId(), function (err, result) {\n        _this.roleBranchOptions = result;\n      });\n    },\n    fetchAreaOption: function (val) {\n      var _this2 = this;\n\n      Meteor.call(\"fetchRolesAreaByMultiRoleBranch\", Meteor.userId(), val, function (err, result) {\n        _this2.roleAreaOptions = result;\n      });\n    },\n    fetchMedicineOption: function () {\n      var vm = this;\n      Meteor.call('co_medicineOptionForReport', function (err, result) {\n        if (result) {\n          vm.medicineOption = result;\n        }\n      });\n    },\n    fetchMedicineTypeOption: function () {\n      var vm = this;\n      Meteor.call('co_medicineTypeOption', function (err, result) {\n        if (result) {\n          vm.medicineTypeOption = result;\n        }\n      });\n    },\n    handleRunReport: function (formName) {\n      var _this3 = this;\n\n      this.$refs[\"medicineBarcodeReport\"].validate(function (valid) {\n        if (valid) {\n          var params = {};\n          var userId = Meteor.userId();\n          _this3.isChooseMedicine = false;\n          _this3.loading = true;\n\n          if (_this3.medicineBarcodeReport.roleAreaOptionsModel != \"\") {\n            params.rolesArea = {\n              $in: _this3.medicineBarcodeReport.roleAreaOptionsModel\n            };\n          }\n\n          if (_this3.medicineBarcodeReport.medicineModel != \"\") {\n            params._id = _this3.medicineBarcodeReport.medicineModel;\n            _this3.isChooseMedicine = false;\n          } else {\n            _this3.isChooseMedicine = true;\n          }\n\n          params.medicineTypeId = _this3.medicineBarcodeReport.medicineTypeModel;\n          Meteor.call('giveMeMedicineBarcodeReport', params, userId, function (err, result) {\n            if (!err) {\n              _this3.medicineBarcodesData = result;\n            }\n\n            _this3.loading = false;\n          });\n        }\n      });\n    },\n    PrintReport: function () {\n      window.print();\n    }\n  },\n  watch: {\n    \"medicineBarcodeReport.roleBranchOptionsModel\": function (val) {\n      this.fetchAreaOption(val);\n    }\n  },\n  created: function () {\n    this.fetchBranchOption();\n    this.fetchMedicineOption();\n    this.fetchMedicineTypeOption();\n  },\n  computed: {\n    dataExist: function () {\n      return this.medicineBarcodesData && this.medicineBarcodesData.data && this.medicineBarcodesData.data.length > 0;\n    }\n  }\n});","map":{"version":3,"sources":["/home/snr/Desktop/Project/cosmetic/imports/vue/ui/medicineBarcode.vue"],"names":["MedicineBarcode","module","link","v","exportDefault","components","data","medicineBarcodeReport","roleBranchOptionsModel","roleAreaOptionsModel","medicineTypeModel","inl","roleBranchOptions","roleAreaOptions","medicineOption","medicineTypeOption","activeName","medicineBarcodesData","loading","branchHeader","printLoading","isChooseMedicine","rules","required","message","trigger","methods","fetchBranchOption","Meteor","call","userId","err","result","fetchAreaOption","val","fetchMedicineOption","vm","fetchMedicineTypeOption","handleRunReport","formName","$refs","validate","valid","params","rolesArea","$in","medicineModel","_id","medicineTypeId","PrintReport","window","print","watch","created","computed","dataExist","length"],"mappings":"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","sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport MedicineBarcode from \"../component/barcode\"\n\nexport default {\n    components: {\n        \"barcode\": MedicineBarcode,\n    },\n    data() {\n        return {\n            medicineBarcodeReport: {\n                roleBranchOptionsModel: [],\n                roleAreaOptionsModel: [],\n                medicineBarcodeReport: \"\",\n                medicineTypeModel: \"\"\n            },\n            inl: true,\n            roleBranchOptions: [],\n            roleAreaOptions: [],\n            medicineOption: [],\n            medicineTypeOption: [],\n            activeName: \"1\",\n            medicineBarcodesData: {},\n            loading: false,\n\n            branchHeader: \"All\",\n            printLoading: false,\n            isChooseMedicine: false,\n            rules: {\n                medicineTypeModel: [{required: true, message: 'Please input Medicine Type', trigger: 'change'}],\n            },\n        }\n    },\n    methods: {\n        fetchBranchOption() {\n            Meteor.call(\"fetchRolesBranch\", Meteor.userId(), (err, result) => {\n                this.roleBranchOptions = result;\n            })\n        },\n        fetchAreaOption(val) {\n            Meteor.call(\"fetchRolesAreaByMultiRoleBranch\", Meteor.userId(), val, (err, result) => {\n                this.roleAreaOptions = result;\n            })\n        },\n        fetchMedicineOption() {\n            let vm = this;\n            Meteor.call('co_medicineOptionForReport', function (err, result) {\n                if (result) {\n                    vm.medicineOption = result;\n                }\n\n            })\n        },\n        fetchMedicineTypeOption() {\n            let vm = this;\n            Meteor.call('co_medicineTypeOption', function (err, result) {\n                if (result) {\n                    vm.medicineTypeOption = result;\n                }\n\n            })\n        },\n        handleRunReport(formName) {\n\n            this.$refs[\"medicineBarcodeReport\"].validate((valid) => {\n                if (valid) {\n                    let params = {};\n                    let userId = Meteor.userId();\n                    this.isChooseMedicine = false;\n\n                    this.loading = true;\n                    if (this.medicineBarcodeReport.roleAreaOptionsModel != \"\") {\n                        params.rolesArea = {$in: this.medicineBarcodeReport.roleAreaOptionsModel};\n\n                    }\n                    if (this.medicineBarcodeReport.medicineModel != \"\") {\n                        params._id = this.medicineBarcodeReport.medicineModel;\n                        this.isChooseMedicine = false;\n                    } else {\n                        this.isChooseMedicine = true;\n\n                    }\n\n                    params.medicineTypeId = this.medicineBarcodeReport.medicineTypeModel;\n\n                    Meteor.call('giveMeMedicineBarcodeReport', params, userId, (err, result) => {\n                        if (!err) {\n                            this.medicineBarcodesData = result;\n                        }\n                        this.loading = false;\n                    });\n                }\n            });\n\n\n        },\n        PrintReport() {\n            window.print();\n        },\n    },\n    watch: {\n\n\n        \"medicineBarcodeReport.roleBranchOptionsModel\"(val) {\n            this.fetchAreaOption(val);\n        }\n\n    },\n    created() {\n        this.fetchBranchOption();\n        this.fetchMedicineOption();\n        this.fetchMedicineTypeOption();\n\n\n    },\n    computed: {\n        dataExist() {\n            return this.medicineBarcodesData && this.medicineBarcodesData.data && this.medicineBarcodesData.data.length > 0;\n        }\n    },\n\n}\n"]},"sourceType":"script","hash":"31ba140343acf68551a4a9f5a474058df4073c83"}
