{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/medicineBarcode.vue","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/medicineBarcode.vue","filename":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/medicineBarcode.vue","passPerPreset":false,"envName":"development","cwd":"/home/snr/Desktop/Project/cosmetic","root":"/home/snr/Desktop/Project/cosmetic","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/medicineBarcode.vue","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/medicineBarcode.vue"}},"code":"var MedicineBarcode;\nmodule.link(\"../component/barcode\", {\n  \"default\": function (v) {\n    MedicineBarcode = v;\n  }\n}, 0);\nmodule.link(\"./ImportFile\");\nvar ImportFile;\nmodule.link(\"./ImportFile\", {\n  \"default\": function (v) {\n    ImportFile = v;\n  }\n}, 1);\nmodule.exportDefault({\n  components: {\n    ImportFile: ImportFile,\n    \"barcode\": MedicineBarcode\n  },\n  data: function () {\n    return {\n      medicineBarcodeReport: {\n        roleBranchOptionsModel: [],\n        roleAreaOptionsModel: [],\n        medicineBarcodeReport: \"\",\n        medicineTypeModel: \"\"\n      },\n      inl: true,\n      roleBranchOptions: [],\n      roleAreaOptions: [],\n      medicineOption: [],\n      medicineTypeOption: [],\n      activeName: \"1\",\n      medicineBarcodesData: [],\n      randomBarcodesData: [],\n      loading: false,\n      isRandom: false,\n      branchHeader: \"All\",\n      printLoading: false,\n      isChooseMedicine: false,\n      rules: {\n        medicineTypeModel: [{\n          required: true,\n          message: 'Please input Medicine Type',\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  methods: {\n    fetchBranchOption: function () {\n      var _this = this;\n\n      Meteor.call(\"fetchRolesBranch\", Meteor.userId(), function (err, result) {\n        _this.roleBranchOptions = result;\n      });\n    },\n    fetchAreaOption: function (val) {\n      var _this2 = this;\n\n      Meteor.call(\"fetchRolesAreaByMultiRoleBranch\", Meteor.userId(), val, function (err, result) {\n        _this2.roleAreaOptions = result;\n      });\n    },\n    fetchMedicineOption: function (typeId) {\n      var vm = this;\n      Meteor.call('co_medicineOptionForReportByType', typeId, function (err, result) {\n        if (result) {\n          vm.medicineOption = result;\n        }\n      });\n    },\n    fetchMedicineTypeOption: function () {\n      var vm = this;\n      Meteor.call('co_medicineTypeOption', function (err, result) {\n        if (result) {\n          vm.medicineTypeOption = result;\n        }\n      });\n    },\n    handleRunReport: function (formName) {\n      var _this3 = this;\n\n      this.isRandom = false;\n      this.$refs[\"medicineBarcodeReport\"].validate(function (valid) {\n        if (valid) {\n          var params = {};\n          var userId = Meteor.userId();\n          _this3.isChooseMedicine = true;\n          _this3.loading = true;\n\n          if (_this3.medicineBarcodeReport.roleAreaOptionsModel != \"\") {\n            params.rolesArea = {\n              $in: _this3.medicineBarcodeReport.roleAreaOptionsModel\n            };\n          }\n\n          if (_this3.medicineBarcodeReport.medicineModel != \"\") {\n            params._id = _this3.medicineBarcodeReport.medicineModel;\n            _this3.isChooseMedicine = true;\n          } else {\n            _this3.isChooseMedicine = false;\n          }\n\n          params.medicineTypeId = _this3.medicineBarcodeReport.medicineTypeModel;\n          Meteor.call('giveMeMedicineBarcodeReport', params, userId, function (err, result) {\n            if (!err) {\n              _this3.medicineBarcodesData = result;\n            }\n\n            _this3.loading = false;\n          });\n        }\n      });\n    },\n    handleRunRandomReport: function () {\n      this.isRandom = true;\n      this.loading = true;\n      var list = [];\n      var doc1 = {};\n      var doc2 = {};\n      var doc3 = {};\n      var doc4 = {};\n      var doc5 = {};\n      console.log(moment().format(\"YYMMDDhhss\"));\n      doc1._id = \"1\" + moment().format(\"YYMMDDhhss\");\n      doc2._id = \"b\" + moment().format(\"YYMMDDhhss\");\n      doc3._id = \"c\" + moment().format(\"YYMMDDhhss\");\n      doc4._id = \"d\" + moment().format(\"YYMMDDhhss\");\n      doc5._id = \"e\" + moment().format(\"YYMMDDhhss\");\n      list.push({\n        doc1: doc1,\n        doc2: doc2,\n        doc3: doc3,\n        doc4: doc4,\n        doc5: doc5\n      });\n      this.randomBarcodesData = list;\n      this.loading = false;\n    },\n    PrintReport: function () {\n      window.print();\n    }\n  },\n  watch: {\n    \"medicineBarcodeReport.roleBranchOptionsModel\": function (val) {\n      this.fetchAreaOption(val);\n    },\n    \"medicineBarcodeReport.medicineTypeModel\": function (val) {\n      this.fetchMedicineOption(val);\n    }\n  },\n  created: function () {\n    this.fetchBranchOption();\n    this.fetchMedicineOption();\n    this.fetchMedicineTypeOption();\n  },\n  computed: {\n    dataExist: function () {\n      return this.medicineBarcodesData && this.medicineBarcodesData.data && this.medicineBarcodesData.data.length > 0;\n    }\n  }\n});","map":{"version":3,"sources":["/home/snr/Desktop/Project/cosmetic/imports/vue/ui/medicineBarcode.vue"],"names":["MedicineBarcode","module","link","v","ImportFile","exportDefault","components","data","medicineBarcodeReport","roleBranchOptionsModel","roleAreaOptionsModel","medicineTypeModel","inl","roleBranchOptions","roleAreaOptions","medicineOption","medicineTypeOption","activeName","medicineBarcodesData","randomBarcodesData","loading","isRandom","branchHeader","printLoading","isChooseMedicine","rules","required","message","trigger","methods","fetchBranchOption","Meteor","call","userId","err","result","fetchAreaOption","val","fetchMedicineOption","typeId","vm","fetchMedicineTypeOption","handleRunReport","formName","$refs","validate","valid","params","rolesArea","$in","medicineModel","_id","medicineTypeId","handleRunRandomReport","list","doc1","doc2","doc3","doc4","doc5","console","log","moment","format","push","PrintReport","window","print","watch","created","computed","dataExist","length"],"mappings":"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","sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport MedicineBarcode from \"../component/barcode\"\nimport \"./ImportFile\"\nimport ImportFile from \"./ImportFile\";\n\nexport default {\n  components: {\n    ImportFile,\n    \"barcode\": MedicineBarcode,\n  },\n  data() {\n    return {\n      medicineBarcodeReport: {\n        roleBranchOptionsModel: [],\n        roleAreaOptionsModel: [],\n        medicineBarcodeReport: \"\",\n        medicineTypeModel: \"\"\n      },\n      inl: true,\n      roleBranchOptions: [],\n      roleAreaOptions: [],\n      medicineOption: [],\n      medicineTypeOption: [],\n      activeName: \"1\",\n      medicineBarcodesData: [],\n      randomBarcodesData: [],\n      loading: false,\n      isRandom: false,\n      branchHeader: \"All\",\n      printLoading: false,\n      isChooseMedicine: false,\n      rules: {\n        medicineTypeModel: [{required: true, message: 'Please input Medicine Type', trigger: 'change'}],\n      },\n    }\n  },\n  methods: {\n    fetchBranchOption() {\n      Meteor.call(\"fetchRolesBranch\", Meteor.userId(), (err, result) => {\n        this.roleBranchOptions = result;\n      })\n    },\n    fetchAreaOption(val) {\n      Meteor.call(\"fetchRolesAreaByMultiRoleBranch\", Meteor.userId(), val, (err, result) => {\n        this.roleAreaOptions = result;\n      })\n    },\n    fetchMedicineOption(typeId) {\n      let vm = this;\n      Meteor.call('co_medicineOptionForReportByType', typeId, function (err, result) {\n        if (result) {\n          vm.medicineOption = result;\n        }\n\n      })\n    },\n    fetchMedicineTypeOption() {\n      let vm = this;\n      Meteor.call('co_medicineTypeOption', function (err, result) {\n        if (result) {\n          vm.medicineTypeOption = result;\n        }\n\n      })\n    },\n    handleRunReport(formName) {\n      this.isRandom = false;\n\n      this.$refs[\"medicineBarcodeReport\"].validate((valid) => {\n        if (valid) {\n          let params = {};\n          let userId = Meteor.userId();\n          this.isChooseMedicine = true;\n\n          this.loading = true;\n          if (this.medicineBarcodeReport.roleAreaOptionsModel != \"\") {\n            params.rolesArea = {$in: this.medicineBarcodeReport.roleAreaOptionsModel};\n\n          }\n          if (this.medicineBarcodeReport.medicineModel != \"\") {\n            params._id = this.medicineBarcodeReport.medicineModel;\n            this.isChooseMedicine = true;\n          } else {\n            this.isChooseMedicine = false;\n\n          }\n\n          params.medicineTypeId = this.medicineBarcodeReport.medicineTypeModel;\n\n          Meteor.call('giveMeMedicineBarcodeReport', params, userId, (err, result) => {\n            if (!err) {\n              this.medicineBarcodesData = result;\n            }\n            this.loading = false;\n          });\n        }\n      });\n\n\n    },\n\n    handleRunRandomReport() {\n\n      this.isRandom = true;\n      this.loading = true;\n      let list = [];\n      let doc1 = {};\n      let doc2 = {};\n      let doc3 = {};\n      let doc4 = {};\n      let doc5 = {};\n      console.log(moment().format(\"YYMMDDhhss\"));\n      doc1._id = \"1\" + moment().format(\"YYMMDDhhss\");\n      doc2._id = \"b\" + moment().format(\"YYMMDDhhss\");\n      doc3._id = \"c\" + moment().format(\"YYMMDDhhss\");\n      doc4._id = \"d\" + moment().format(\"YYMMDDhhss\");\n      doc5._id = \"e\" + moment().format(\"YYMMDDhhss\");\n      list.push({doc1, doc2, doc3, doc4, doc5});\n      this.randomBarcodesData = list;\n      this.loading = false;\n\n\n    },\n    PrintReport() {\n      window.print();\n    },\n  },\n  watch: {\n\n\n    \"medicineBarcodeReport.roleBranchOptionsModel\"(val) {\n      this.fetchAreaOption(val);\n    }\n    , \"medicineBarcodeReport.medicineTypeModel\"(val) {\n      this.fetchMedicineOption(val);\n    }\n\n  },\n  created() {\n    this.fetchBranchOption();\n    this.fetchMedicineOption();\n    this.fetchMedicineTypeOption();\n\n\n  },\n  computed: {\n    dataExist() {\n      return this.medicineBarcodesData && this.medicineBarcodesData.data && this.medicineBarcodesData.data.length > 0;\n    }\n  },\n\n}\n"]},"sourceType":"script","hash":"b1691bc4e220e2edd1fa6355f2619ca3e25dc425"}
