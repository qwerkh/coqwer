{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/registerService.vue","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/registerService.vue","filename":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/registerService.vue","passPerPreset":false,"envName":"development","cwd":"/home/snr/Desktop/Project/cosmetic","root":"/home/snr/Desktop/Project/cosmetic","generatorOpts":{"filename":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/registerService.vue","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/registerService.vue"}},"code":"module.exportDefault({\n  data: function () {\n    return {\n      registerServiceReport: {\n        roleBranchOptionsModel: [],\n        roleAreaOptionsModel: [],\n        patientOptionsModel: [],\n        typeOptionsModel: [],\n        dateRange: \"\"\n      },\n      roleBranchOptions: [],\n      roleAreaOptions: [],\n      patientOptions: [],\n      typeOptions: [],\n      serviceTypeOptions: [],\n      serviceOptions: [],\n      exchangeOptions: [],\n      dateRange: \"\",\n      activeName: \"1\",\n      registersData: [],\n      loading: false,\n      companyName: \"\",\n      companyEnName: \"\",\n      addressName: \"\",\n      branchHeader: \"All\",\n      dateRangeHeader: \"All\",\n      pickerOptions2: {\n        shortcuts: [{\n          text: 'Last week',\n          onClick: function (picker) {\n            var end = new Date();\n            var start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: 'Last month',\n          onClick: function (picker) {\n            var end = new Date();\n            var start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: 'Last 3 months',\n          onClick: function (picker) {\n            var end = new Date();\n            var start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\n            picker.$emit('pick', [start, end]);\n          }\n        }]\n      },\n      printLoading: false\n    };\n  },\n  methods: {\n    fetchBranchOption: function () {\n      var _this = this;\n\n      Meteor.call(\"fetchRolesBranch\", Meteor.userId(), function (err, result) {\n        _this.roleBranchOptions = result;\n      });\n    },\n    fetchAreaOption: function (val) {\n      var _this2 = this;\n\n      Meteor.call(\"fetchRolesAreaByMultiRoleBranch\", Meteor.userId(), val, function (err, result) {\n        _this2.roleAreaOptions = result;\n      });\n    },\n    fetchPatientOption: function (val) {\n      var _this3 = this;\n\n      Meteor.call(\"fetchPatientOption\", val, function (err, result) {\n        _this3.patientOptions = result;\n      });\n    },\n    fetchExchangeOption: function () {\n      var _this4 = this;\n\n      Meteor.call(\"fetchExchangeOption\", function (err, result) {\n        _this4.exchangeOptions = result;\n      });\n    },\n    fetchTypeOption: function () {\n      var list = [];\n      list.push({\n        label: \"Active\",\n        value: \"Active\"\n      });\n      list.push({\n        label: \"Partial\",\n        value: \"Partial\"\n      });\n      list.push({\n        label: \"Complete\",\n        value: \"Complete\"\n      });\n      this.typeOptions = list;\n    },\n    fetchServiceType: function () {\n      var vm = this;\n      Meteor.call(\"co_serviceTypeOption\", function (err, result) {\n        if (result) {\n          vm.serviceTypeOptions = result;\n        }\n      });\n    },\n    fetchService: function (serviceType) {\n      var vm = this;\n      Meteor.call(\"co_serviceByTypeOption\", serviceType, function (err, result) {\n        if (result) {\n          vm.serviceOptions = result;\n        }\n      });\n    },\n    handleRunReport: function (formName) {\n      var _this5 = this;\n\n      var params = {};\n      var userId = Meteor.userId();\n      this.loading = true;\n\n      if (this.registerServiceReport.roleAreaOptionsModel != \"\") {\n        params.rolesArea = {\n          $in: this.registerServiceReport.roleAreaOptionsModel\n        };\n        Meteor.call(\"getBranchHeader\", this.registerServiceReport.roleAreaOptionsModel, function (err, result) {\n          _this5.branchHeader = result;\n        });\n      }\n\n      if (this.registerServiceReport.dateRange != \"\") {\n        params.registerDate = {\n          $gte: moment(this.registerServiceReport.dateRange[0]).startOf(\"days\").toDate(),\n          $lte: moment(this.registerServiceReport.dateRange[1]).endOf(\"days\").toDate()\n        };\n        this.dateRangeHeader = moment(this.registerServiceReport.dateRange[0]).format(\"DD/MM/YYYY\") + \"-\" + moment(this.registerServiceReport.dateRange[1]).format(\"DD/MM/YYYY\");\n      }\n\n      if (this.registerServiceReport.patientOptionsModel != \"\") {\n        params.patientId = {\n          $in: this.registerServiceReport.patientOptionsModel\n        };\n      }\n\n      if (this.registerServiceReport.typeOptionsModel != \"\") {\n        params.status = {\n          $in: this.registerServiceReport.typeOptionsModel\n        };\n      }\n\n      Meteor.call('giveMeRegisterServiceReport', params, userId, function (err, result) {\n        if (!err) {\n          _this5.registersData = result;\n        }\n\n        _this5.loading = false;\n      });\n    },\n    getCompany: function () {\n      var _this6 = this;\n\n      Meteor.call(\"getCompany\", function (err, result) {\n        if (!err) {\n          _this6.companyName = result.khName;\n          _this6.companyEnName = result.enName;\n          _this6.addressName = result.khAddress;\n        }\n      });\n    },\n    PrintReport: function () {\n      window.print();\n    }\n  },\n  watch: {\n    \"registerServiceReport.roleBranchOptionsModel\": function (val) {\n      this.fetchAreaOption(val);\n    },\n    \"registerServiceReport.roleAreaOptionsModel\": function (val) {\n      this.fetchPatientOption(val);\n    },\n    \"registerMedicineReport.medicineTypeOptionsModel\": function (val) {\n      this.registerMedicineReport.medicineOptionsModel = [];\n      this.fetchMedicine(val);\n    }\n  },\n  created: function () {\n    this.fetchBranchOption(); //            this.fetchPatientOption([]);\n\n    this.fetchTypeOption([]);\n    this.getCompany();\n    this.fetchServiceType();\n    this.registerServiceReport.dateRange = [moment().startOf(\"months\").toDate(), moment().endOf(\"months\").toDate()];\n  },\n  computed: {\n    dataExist: function () {\n      return this.registersData.length > 0;\n    }\n  }\n});","map":{"version":3,"sources":["/home/snr/Desktop/Project/cosmetic/imports/vue/ui/registerService.vue"],"names":["module","exportDefault","data","registerServiceReport","roleBranchOptionsModel","roleAreaOptionsModel","patientOptionsModel","typeOptionsModel","dateRange","roleBranchOptions","roleAreaOptions","patientOptions","typeOptions","serviceTypeOptions","serviceOptions","exchangeOptions","activeName","registersData","loading","companyName","companyEnName","addressName","branchHeader","dateRangeHeader","pickerOptions2","shortcuts","text","onClick","picker","end","Date","start","setTime","getTime","$emit","printLoading","methods","fetchBranchOption","Meteor","call","userId","err","result","fetchAreaOption","val","fetchPatientOption","fetchExchangeOption","fetchTypeOption","list","push","label","value","fetchServiceType","vm","fetchService","serviceType","handleRunReport","formName","params","rolesArea","$in","registerDate","$gte","moment","startOf","toDate","$lte","endOf","format","patientId","status","getCompany","khName","enName","khAddress","PrintReport","window","print","watch","registerMedicineReport","medicineOptionsModel","fetchMedicine","created","computed","dataExist","length"],"mappings":"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","sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    export default {\n        data() {\n            return {\n                registerServiceReport: {\n                    roleBranchOptionsModel: [],\n                    roleAreaOptionsModel: [],\n                    patientOptionsModel: [],\n                    typeOptionsModel: [],\n                    dateRange: \"\"\n                },\n\n                roleBranchOptions: [],\n                roleAreaOptions: [],\n                patientOptions: [],\n                typeOptions: [],\n\n                serviceTypeOptions: [],\n                serviceOptions: [],\n                exchangeOptions: [],\n\n                dateRange: \"\",\n                activeName: \"1\",\n                registersData: [],\n                loading: false,\n\n                companyName: \"\",\n                companyEnName: \"\",\n                addressName: \"\",\n\n                branchHeader: \"All\",\n                dateRangeHeader: \"All\",\n                pickerOptions2: {\n                    shortcuts: [{\n                        text: 'Last week',\n                        onClick(picker) {\n                            const end = new Date();\n                            const start = new Date();\n                            start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);\n                            picker.$emit('pick', [start, end]);\n                        }\n                    }, {\n                        text: 'Last month',\n                        onClick(picker) {\n                            const end = new Date();\n                            const start = new Date();\n                            start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\n                            picker.$emit('pick', [start, end]);\n                        }\n                    }, {\n                        text: 'Last 3 months',\n                        onClick(picker) {\n                            const end = new Date();\n                            const start = new Date();\n                            start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\n                            picker.$emit('pick', [start, end]);\n                        }\n                    }]\n                },\n                printLoading: false,\n            }\n        },\n        methods: {\n            fetchBranchOption() {\n                Meteor.call(\"fetchRolesBranch\", Meteor.userId(), (err, result) => {\n                    this.roleBranchOptions = result;\n                })\n            },\n            fetchAreaOption(val) {\n                Meteor.call(\"fetchRolesAreaByMultiRoleBranch\", Meteor.userId(), val, (err, result) => {\n                    this.roleAreaOptions = result;\n                })\n            },\n            fetchPatientOption(val) {\n                Meteor.call(\"fetchPatientOption\", val, (err, result) => {\n                    this.patientOptions = result;\n                })\n            },\n            fetchExchangeOption() {\n                Meteor.call(\"fetchExchangeOption\", (err, result) => {\n                    this.exchangeOptions = result;\n                })\n            },\n            fetchTypeOption() {\n                let list = [];\n                list.push({label: \"Active\", value: \"Active\"});\n                list.push({label: \"Partial\", value: \"Partial\"});\n                list.push({label: \"Complete\", value: \"Complete\"});\n\n                this.typeOptions = list;\n            },\n            fetchServiceType() {\n                let vm = this;\n                Meteor.call(\"co_serviceTypeOption\", function (err, result) {\n                    if (result) {\n                        vm.serviceTypeOptions = result;\n                    }\n                })\n            },\n            fetchService(serviceType) {\n                let vm = this;\n                Meteor.call(\"co_serviceByTypeOption\", serviceType, function (err, result) {\n                    if (result) {\n                        vm.serviceOptions = result;\n                    }\n                })\n            },\n            handleRunReport(formName) {\n\n                let params = {};\n                let userId = Meteor.userId();\n\n                this.loading = true;\n                if (this.registerServiceReport.roleAreaOptionsModel != \"\") {\n                    params.rolesArea = {$in: this.registerServiceReport.roleAreaOptionsModel};\n\n                    Meteor.call(\"getBranchHeader\", this.registerServiceReport.roleAreaOptionsModel, (err, result) => {\n                        this.branchHeader = result;\n                    })\n                }\n\n                if (this.registerServiceReport.dateRange != \"\") {\n                    params.registerDate = {\n                        $gte: moment(this.registerServiceReport.dateRange[0]).startOf(\"days\").toDate(),\n                        $lte: moment(this.registerServiceReport.dateRange[1]).endOf(\"days\").toDate()\n                    };\n\n                    this.dateRangeHeader = moment(this.registerServiceReport.dateRange[0]).format(\"DD/MM/YYYY\") + \"-\" + moment(this.registerServiceReport.dateRange[1]).format(\"DD/MM/YYYY\");\n                }\n\n                if (this.registerServiceReport.patientOptionsModel != \"\") {\n                    params.patientId = {$in: this.registerServiceReport.patientOptionsModel};\n                }\n\n                if (this.registerServiceReport.typeOptionsModel != \"\") {\n                    params.status = {$in: this.registerServiceReport.typeOptionsModel};\n                }\n\n\n                Meteor.call('giveMeRegisterServiceReport', params, userId, (err, result) => {\n                    if (!err) {\n                        this.registersData = result;\n                    }\n                    this.loading = false;\n                });\n\n\n            },\n            getCompany() {\n                Meteor.call(\"getCompany\", (err, result) => {\n                    if (!err) {\n                        this.companyName = result.khName;\n                        this.companyEnName = result.enName;\n                        this.addressName = result.khAddress;\n                    }\n                })\n\n            },\n            PrintReport() {\n                window.print();\n            }\n        },\n        watch: {\n            \"registerServiceReport.roleBranchOptionsModel\"(val) {\n                this.fetchAreaOption(val);\n            }\n            ,\n            \"registerServiceReport.roleAreaOptionsModel\"(val) {\n                this.fetchPatientOption(val);\n            },\n            \"registerMedicineReport.medicineTypeOptionsModel\"(val) {\n                this.registerMedicineReport.medicineOptionsModel = [];\n                this.fetchMedicine(val);\n            }\n\n        },\n        created() {\n            this.fetchBranchOption();\n//            this.fetchPatientOption([]);\n            this.fetchTypeOption([]);\n            this.getCompany();\n            this.fetchServiceType();\n            this.registerServiceReport.dateRange = [moment().startOf(\"months\").toDate(), moment().endOf(\"months\").toDate()];\n\n\n        },\n        computed: {\n            dataExist() {\n                return this.registersData.length > 0;\n            }\n        },\n\n    }\n"]},"sourceType":"script","hash":"588fdc781db3c7dad43f9c7550c1cfbf59f271ca"}
