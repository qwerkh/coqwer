{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/patientImage.vue","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/patientImage.vue","filename":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/patientImage.vue","passPerPreset":false,"envName":"development","cwd":"/home/snr/Desktop/Project/cosmetic","root":"/home/snr/Desktop/Project/cosmetic","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/patientImage.vue","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/patientImage.vue"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar firebase;\nmodule.link(\"firebase\", {\n  \"default\": function (v) {\n    firebase = v;\n  }\n}, 0);\n\nvar Compress = require('compress.js');\n\nmodule.exportDefault({\n  meteor: {},\n  mounted: function () {},\n  data: function () {\n    return {\n      uploadValue: 0,\n      selectedFile: ''\n    };\n  },\n  watch: {\n    currentSize: function (val) {\n      this.isSearching = true;\n      this.skip = (this.currentPage - 1) * val;\n      this.queryData(this.searchData, this.skip, val + this.skip);\n    },\n    currentPage: function (val) {\n      this.isSearching = true;\n      this.skip = (val - 1) * this.currentSize;\n      this.queryData(this.searchData, this.skip, this.currentSize + this.skip);\n    },\n    searchData: function (val) {\n      this.isSearching = true;\n      this.skip = (this.currentPage - 1) * this.currentSize;\n      this.queryData(val, this.skip, this.currentSize + this.skip);\n    },\n    \"posProductForm.categoryId\": function (val) {\n      var vm = this;\n\n      if (this.refForm === \"posProductFormAdd\") {\n        Meteor.call(\"getProductCodeByCateogry\", val, Constants.secret, function (err, result) {\n          if (!err) {\n            vm.posProductForm.code = result;\n          }\n        });\n      }\n    },\n    'thumbImgCroppa.loading': function (val) {\n      if (!val) {\n        this.generateThumbImgUrl();\n      }\n    }\n  },\n  methods: {\n    onFileSelected: function (e) {\n      var _this = this;\n\n      var vm = this;\n      this.imgUrl = window.URL.createObjectURL(e.target.files[0]);\n      /* Meteor.setTimeout(function () {\n         vm.onUpload();\n       }, 500);*/\n\n      var tmpFile = (0, _toConsumableArray2.default)(e.target.files);\n      var compress = new Compress();\n      compress.compress(tmpFile, {\n        size: 4,\n        // the max size in MB, defaults to 2MB\n        quality: 0.6,\n        // the quality of the image, max is 1,\n        maxWidth: 1920,\n        // the max width of the output image, defaults to 1920px\n        maxHeight: 1920,\n        // the max height of the output image, defaults to 1920px\n        resize: true // defaults to true, set false if you do not want to resize the image width and height\n\n      }).then(function (data) {\n        data.forEach(function (obj) {\n          var img1 = obj;\n          var base64str = img1.data;\n          var imgExt = img1.ext;\n          _this.selectedFile = Compress.convertBase64ToFile(base64str, imgExt), obj.alt.split(\".\")[0];\n        });\n      });\n    },\n    handleSizeChange: function (val) {\n      this.currentSize = val;\n    },\n    handleCurrentChange: function (val) {\n      this.currentPage = val;\n    },\n    queryData: _.debounce(function (val, skip, limit) {\n      var _this2 = this;\n\n      this.newLoading = true;\n      Meteor.call('queryPosProduct', {\n        q: val,\n        filter: this.filter,\n        options: {\n          skip: skip || 0,\n          limit: limit || 10\n        },\n        accessToken: Constants.secret\n      }, function (err, result) {\n        if (!err) {\n          _this2.posProductData = result.content;\n          _this2.count = result.countPosProduct;\n        }\n\n        _this2.isSearching = false;\n        _this2.newLoading = false;\n      });\n    }, 300),\n    queryCategoryDataOption: function () {\n      var selector = {};\n      var vm = this;\n      Meteor.call(\"queryCategoryOption\", selector, Constants.secret, function (err, result) {\n        if (result) {\n          vm.categoryDataOption = result;\n        }\n      });\n    },\n    queryUnitDataOption: function () {\n      var selector = {};\n      var vm = this;\n      Meteor.call(\"queryPosUnitOption\", selector, Constants.secret, function (err, result) {\n        if (result) {\n          vm.unitDataOption = result;\n        }\n      });\n    },\n    savePosProduct: function (event) {\n      var _this3 = this;\n\n      event.preventDefault();\n      var vm = this;\n      this.$refs[\"posProductFormAdd\"].validate(function (valid) {\n        if (valid) {\n          var imageId = \"\";\n          var imagePath = \"\";\n\n          if (!!vm.selectedFile) {\n            /*const upload = Images.insert({\n                file: vm.imgUrl,\n                streams: 'dynamic',\n                chunkSize: 'dynamic'\n            }, false);\n             upload.on('start', function (error, result) {\n                if (error) {\n                    console.log(error.message);\n                }\n            })\n             upload.on('end', function (error, fileObj) {\n                if (error) {\n                    console.log(error.message);\n                } else {\n                    imageId = fileObj._id;\n                    imagePath = fileObj._downloadRoute + \"/\" + fileObj._collectionName + \"/\" + fileObj._id + \"/original/\" + fileObj._id + fileObj.extensionWithDot;\n                     let posProductDoc = {\n                        code: vm.posProductForm.code,\n                        name: vm.posProductForm.name,\n                        khName: vm.posProductForm.khName,\n                        productType: vm.posProductForm.productType,\n                        categoryId: vm.posProductForm.categoryId,\n                        whPrice: vm.posProductForm.whPrice,\n                        rePrice: vm.posProductForm.rePrice,\n                        cost: vm.posProductForm.cost,\n                        qtyOnHand: vm.posProductForm.qtyOnHand,\n                        isTaxable: vm.posProductForm.isTaxable,\n                        description: vm.posProductForm.description,\n                        minimumStock: vm.posProductForm.minimumStock,\n                        unitId: vm.posProductForm.unitId,\n                        barcode: vm.posProductForm.barcode,\n                        status: vm.posProductForm.status,\n                        imageId: imageId,\n                        imagePath: imagePath\n                     };\n                     Meteor.call(\"insertPosProduct\", posProductDoc, (err, result) => {\n                        if (!err) {\n                            vm.$message({\n                                duration: 1000,\n                                message: `Save Successfully!`,\n                                type: 'success'\n                            });\n                            vm.dialogAddPosProduct = false;\n                            vm.queryCategoryDataOption();\n                            if (vm.$refs[\"posProductFormAdd\"]) {\n                                vm.$refs[\"posProductFormAdd\"].resetFields();\n                            }\n                             //Image\n                             if (vm.imgUrl) {\n                                //const storageRef = firebase.storage().ref(`${this.imageData.name}`).put(vm.imgUrl);\n                                const storageRef = firebase.storage().ref(\"pic1\").put(vm.imgUrl);\n                                storageRef.on(`state_changed`, snapshot => {\n                                        this.uploadValue = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                                    }, error => {\n                                        console.log(error.message)\n                                    },\n                                    () => {\n                                        this.uploadValue = 100;\n                                        storageRef.snapshot.ref.getDownloadURL().then((url) => {\n                                            console.log(url);\n                                        });\n                                    }\n                                );\n                            }\n                              /!*if (vm.imgUrl) {\n                                const storageRef = storagePath.fileImage(fileImage, Meteor.userId(), result, \"category\");\n                                let uploadTask = storageRef\n                                    .child(\"fileImage\")\n                                    .putString(vm.imgUrl, \"data_url\");\n                                uploadTask.on(\n                                    \"state_changed\",\n                                    function (snapshot) {\n                                        // Observe state change events such as progress, pause, and resume\n                                        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n                                        let progress =\n                                            snapshot.bytesTransferred / snapshot.totalBytes * 100;\n                                        console.log(\"Upload is \" + progress + \"% done\");\n                                        switch (snapshot.state) {\n                                            case firebase.storageState.PAUSED: // or 'paused'\n                                                console.log(\"Upload is paused\");\n                                                break;\n                                            case firebase.storageState.RUNNING: // or 'running'\n                                                console.log(\"Upload is running \" + progress);\n                                                break;\n                                        }\n                                    },\n                                    function (error) {\n                                        /!*setTimeout(() => {\n                                            loading.close();\n                                        }, 1000)*!/\n                                    },\n                                    function () {\n                                        uploadTask.snapshot.ref.getDownloadURL()\n                                            .then(url => {\n                                                console.log(url);\n                                                Meteor.call('sch_updateProductImageURlById', result, url, (err, re) => {\n                                                    if (err) {\n                                                        console.log(err.message);\n                                                    } else {\n                                                        vm.thumbImgCroppa = null;\n                                                    }\n                                                });\n                                            }).catch(err => console.log(err));\n                                    });\n                            }*!/\n                              // /Image\n                          } else {\n                            vm.$message({\n                                duration: 1000,\n                                message: err.message,\n                                type: 'error'\n                            });\n                        }\n                    })\n                 }\n            })\n             //upload.start();*/\n            var posProductDoc = {\n              code: vm.posProductForm.code,\n              name: vm.posProductForm.name,\n              khName: vm.posProductForm.khName,\n              productType: vm.posProductForm.productType,\n              categoryId: vm.posProductForm.categoryId,\n              whPrice: vm.posProductForm.whPrice,\n              rePrice: vm.posProductForm.rePrice,\n              cost: vm.posProductForm.cost,\n              qtyOnHand: vm.posProductForm.qtyOnHand,\n              isTaxable: vm.posProductForm.isTaxable,\n              description: vm.posProductForm.description,\n              minimumStock: vm.posProductForm.minimumStock,\n              barcode: vm.posProductForm.barcode,\n              status: vm.posProductForm.status,\n              unitId: vm.posProductForm.unitId\n            };\n            Meteor.call(\"insertPosProduct\", posProductDoc, Constants.secret, function (err, result) {\n              if (!err) {\n                vm.$message({\n                  duration: 1000,\n                  message: \"Save Successfully!\",\n                  type: 'success'\n                });\n                vm.dialogAddPosProduct = false;\n                vm.queryCategoryDataOption();\n\n                if (vm.$refs[\"posProductFormAdd\"]) {\n                  vm.$refs[\"posProductFormAdd\"].resetFields();\n                }\n\n                if (!!vm.selectedFile && result) {\n                  //const storageRef = firebase.storage().ref(`${this.imageData.name}`).put(vm.imgUrl);\n                  var storageRef = firebase.storage().ref(\"product\" + result).put(vm.selectedFile);\n                  storageRef.on(\"state_changed\", function (snapshot) {\n                    _this3.uploadValue = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n                  }, function (error) {\n                    console.log(error.message);\n                  }, function () {\n                    _this3.uploadValue = 100;\n                    storageRef.snapshot.ref.getDownloadURL().then(function (url) {\n                      Meteor.call(\"updatePosProductImage\", result, url, Constants.secret, function (err, result) {\n                        if (err) {\n                          console.log(err.message);\n                        }\n\n                        vm.selectedFile = \"\";\n                      });\n                    });\n                  });\n                }\n              } else {\n                vm.$message({\n                  duration: 1000,\n                  message: err.message,\n                  type: 'error'\n                });\n              }\n            });\n          } else {\n            var _posProductDoc = {\n              code: vm.posProductForm.code,\n              name: vm.posProductForm.name,\n              khName: vm.posProductForm.khName,\n              productType: vm.posProductForm.productType,\n              categoryId: vm.posProductForm.categoryId,\n              whPrice: vm.posProductForm.whPrice,\n              rePrice: vm.posProductForm.rePrice,\n              cost: vm.posProductForm.cost,\n              qtyOnHand: vm.posProductForm.qtyOnHand,\n              isTaxable: vm.posProductForm.isTaxable,\n              description: vm.posProductForm.description,\n              minimumStock: vm.posProductForm.minimumStock,\n              barcode: vm.posProductForm.barcode,\n              status: vm.posProductForm.status,\n              unitId: vm.posProductForm.unitId\n            };\n            Meteor.call(\"insertPosProduct\", _posProductDoc, Constants.secret, function (err, result) {\n              if (!err) {\n                vm.$message({\n                  duration: 1000,\n                  message: \"Save Successfully!\",\n                  type: 'success'\n                });\n                vm.dialogAddPosProduct = false;\n                vm.queryCategoryDataOption();\n\n                if (vm.$refs[\"posProductFormAdd\"]) {\n                  vm.$refs[\"posProductFormAdd\"].resetFields();\n                }\n              } else {\n                vm.$message({\n                  duration: 1000,\n                  message: err.message,\n                  type: 'error'\n                });\n              }\n            });\n          }\n        }\n      });\n    },\n    updatePosProduct: function () {\n      var _this4 = this;\n\n      var vm = this;\n      this.$refs[\"posProductFormUpdate\"].validate(function (valid) {\n        if (valid) {\n          if (!!vm.selectedFile) {\n            /*const upload = Images.insert({\n                file: vm.imgUrl,\n                streams: 'dynamic',\n                chunkSize: 'dynamic'\n            }, false);\n             upload.on('start', function (error, result) {\n                if (error) {\n                    console.log(error.message);\n                }\n            })\n             upload.on('end', function (error, fileObj) {\n                if (error) {\n                    console.log(error.message);\n                } else {\n                    let imageId = fileObj._id;\n                    let imagePath = fileObj._downloadRoute + \"/\" + fileObj._collectionName + \"/\" + fileObj._id + \"/original/\" + fileObj._id + fileObj.extensionWithDot;\n                     let posProductDoc = {\n                        _id: vm.posProductForm._id,\n                        code: vm.posProductForm.code,\n                        name: vm.posProductForm.name,\n                        khName: vm.posProductForm.khName,\n                        productType: vm.posProductForm.productType,\n                        categoryId: vm.posProductForm.categoryId,\n                        whPrice: vm.posProductForm.whPrice,\n                        rePrice: vm.posProductForm.rePrice,\n                        cost: vm.posProductForm.cost,\n                        qtyOnHand: vm.posProductForm.qtyOnHand,\n                        isTaxable: vm.posProductForm.isTaxable,\n                        description: vm.posProductForm.description,\n                        minimumStock: vm.posProductForm.minimumStock,\n                        unitId: vm.posProductForm.unitId,\n                        barcode: vm.posProductForm.barcode,\n                        status: vm.posProductForm.status,\n                          imageId: imageId,\n                        imagePath: imagePath\n                    };\n                     Meteor.call(\"updatePosProduct\", posProductDoc, (err, result) => {\n                        if (!err) {\n                            vm.$message({\n                                duration: 1000,\n                                message: `\n            Update\n            Successfully\n            !`,\n                                type: 'success'\n                            });\n                            vm.dialogUpdatePosProduct = false;\n                            vm.queryCategoryDataOption();\n                            if (vm.$refs[\"posProductFormUpdate\"]) {\n                                vm.$refs[\"posProductFormUpdate\"].resetFields();\n                            }\n                        } else {\n                            vm.$message({\n                                duration: 1000,\n                                message: `\n            Update\n            Failed\n            !`,\n                                type: 'error'\n                            });\n                        }\n                    })\n                 }\n            })\n             upload.start();*/\n            var posProductDoc = {\n              _id: vm.posProductForm._id,\n              code: vm.posProductForm.code,\n              name: vm.posProductForm.name,\n              khName: vm.posProductForm.khName,\n              productType: vm.posProductForm.productType,\n              categoryId: vm.posProductForm.categoryId,\n              whPrice: vm.posProductForm.whPrice,\n              rePrice: vm.posProductForm.rePrice,\n              cost: vm.posProductForm.cost,\n              qtyOnHand: vm.posProductForm.qtyOnHand,\n              isTaxable: vm.posProductForm.isTaxable,\n              description: vm.posProductForm.description,\n              barcode: vm.posProductForm.barcode,\n              minimumStock: vm.posProductForm.minimumStock,\n              status: vm.posProductForm.status,\n              unitId: vm.posProductForm.unitId\n            };\n            Meteor.call(\"updatePosProduct\", posProductDoc, Constants.secret, function (err, result) {\n              if (!err) {\n                vm.$message({\n                  duration: 1000,\n                  message: \"\\n                        Update\\n                        Successfully\\n                        !\",\n                  type: 'success'\n                });\n                vm.dialogUpdatePosProduct = false;\n                vm.queryCategoryDataOption();\n\n                if (vm.$refs[\"posProductFormUpdate\"]) {\n                  vm.$refs[\"posProductFormUpdate\"].resetFields();\n                }\n\n                if (!!vm.selectedFile && vm.posProductForm._id) {\n                  //const storageRef = firebase.storage().ref(`${this.imageData.name}`).put(vm.imgUrl);\n                  var storageRef = firebase.storage().ref(\"product\" + vm.posProductForm._id).put(vm.selectedFile);\n                  storageRef.on(\"state_changed\", function (snapshot) {\n                    _this4.uploadValue = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n                  }, function (error) {\n                    console.log(error.message);\n                  }, function () {\n                    _this4.uploadValue = 100;\n                    storageRef.snapshot.ref.getDownloadURL().then(function (url) {\n                      Meteor.call(\"updatePosProductImage\", vm.posProductForm._id, url, Constants.secret, function (err, result) {\n                        if (err) {\n                          console.log(err.message);\n                        }\n\n                        vm.selectedFile = \"\";\n                      });\n                    });\n                  });\n                }\n              } else {\n                vm.$message({\n                  duration: 1000,\n                  message: \"\\n                        Update\\n                        Failed\\n                        !\",\n                  type: 'error'\n                });\n              }\n            });\n          } else {\n            var _posProductDoc2 = {\n              _id: vm.posProductForm._id,\n              code: vm.posProductForm.code,\n              name: vm.posProductForm.name,\n              khName: vm.posProductForm.khName,\n              productType: vm.posProductForm.productType,\n              categoryId: vm.posProductForm.categoryId,\n              whPrice: vm.posProductForm.whPrice,\n              rePrice: vm.posProductForm.rePrice,\n              cost: vm.posProductForm.cost,\n              qtyOnHand: vm.posProductForm.qtyOnHand,\n              isTaxable: vm.posProductForm.isTaxable,\n              description: vm.posProductForm.description,\n              barcode: vm.posProductForm.barcode,\n              minimumStock: vm.posProductForm.minimumStock,\n              status: vm.posProductForm.status,\n              unitId: vm.posProductForm.unitId\n            };\n            Meteor.call(\"updatePosProduct\", _posProductDoc2, Constants.secret, function (err, result) {\n              if (!err) {\n                vm.$message({\n                  duration: 1000,\n                  message: \"\\n                        Update\\n                        Successfully\\n                        !\",\n                  type: 'success'\n                });\n                vm.dialogUpdatePosProduct = false;\n                vm.queryCategoryDataOption();\n\n                if (vm.$refs[\"posProductFormUpdate\"]) {\n                  vm.$refs[\"posProductFormUpdate\"].resetFields();\n                }\n              } else {\n                vm.$message({\n                  duration: 1000,\n                  message: \"\\n                        Update\\n                        Failed\\n                        !\",\n                  type: 'error'\n                });\n              }\n            });\n          }\n        }\n      });\n    },\n    removePosProduct: function (index, row, rows) {\n      var _this5 = this;\n\n      var vm = this;\n      this.$confirm('This will permanently delete the Item. Continue?', 'Warning', {\n        confirmButtonText: 'OK',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      }).then(function () {\n        Meteor.call(\"removePosProduct\", row._id, row.imageId, Constants.secret, function (err, result) {\n          if (!err) {\n            rows.splice(index, 1);\n            vm.$message({\n              message: \"\\n                        \\u179B\\u17BB\\u1794 \" + row.code + \" : \" + row.name + \" \\u1794\\u17B6\\u1793\\u1787\\u17C4\\u1782\\u1787\\u17D0\\u1799\",\n              type: 'success'\n            });\n            vm.queryCategoryDataOption();\n          } else {\n            vm.$message({\n              type: 'error',\n              message: 'Delete Fialed'\n            });\n          }\n        });\n      }).catch(function () {\n        _this5.$message({\n          type: 'info',\n          message: 'Delete canceled'\n        });\n      });\n    },\n    findPosProductById: function (doc) {\n      var _this6 = this;\n\n      var vm = this;\n      vm.posProductForm = {};\n      Meteor.call(\"queryPosProductById\", doc.row._id, Constants.secret, function (err, result) {\n        if (result) {\n          vm.posProductForm._id = result._id;\n          vm.posProductForm = result;\n          vm.imgUrl = result.imagePath || \"\";\n\n          _this6.queryCategoryDataOption();\n        }\n      });\n    },\n    cancel: function () {\n      this.$message({\n        type: 'info',\n        message: 'Canceled'\n      });\n    },\n    resetForm: function () {\n      this.posProductForm._id = \"\";\n      this.refForm = \"\";\n      this.queryCategoryDataOption();\n\n      if (this.$refs[\"posProductFormAdd\"]) {\n        this.$refs[\"posProductFormAdd\"].resetFields();\n      }\n\n      if (this.$refs[\"posProductFormUpdate\"]) {\n        this.$refs[\"posProductFormUpdate\"].resetFields();\n      }\n    },\n    popUpAdd: function () {\n      this.refForm = \"posProductFormAdd\";\n      this.handleThumbImgRemove();\n    },\n    popUpUpdate: function () {\n      this.refForm = \"posProductFormUpdate\";\n    }\n  },\n  created: function () {\n    this.isSearching = true;\n    this.queryCategoryDataOption();\n    this.queryUnitDataOption();\n    this.queryData();\n    Meteor.subscribe('Pos_ProductReact');\n  },\n  computed: {}\n});","map":{"version":3,"sources":["/home/snr/Desktop/Project/cosmetic/imports/vue/ui/patientImage.vue"],"names":["firebase","module","link","v","Compress","require","exportDefault","meteor","mounted","data","uploadValue","selectedFile","watch","currentSize","val","isSearching","skip","currentPage","queryData","searchData","vm","refForm","Meteor","call","Constants","secret","err","result","posProductForm","code","generateThumbImgUrl","methods","onFileSelected","e","imgUrl","window","URL","createObjectURL","target","files","tmpFile","compress","size","quality","maxWidth","maxHeight","resize","then","forEach","obj","img1","base64str","imgExt","ext","convertBase64ToFile","alt","split","handleSizeChange","handleCurrentChange","_","debounce","limit","newLoading","q","filter","options","accessToken","posProductData","content","count","countPosProduct","queryCategoryDataOption","selector","categoryDataOption","queryUnitDataOption","unitDataOption","savePosProduct","event","preventDefault","$refs","validate","valid","imageId","imagePath","posProductDoc","name","khName","productType","categoryId","whPrice","rePrice","cost","qtyOnHand","isTaxable","description","minimumStock","barcode","status","unitId","$message","duration","message","type","dialogAddPosProduct","resetFields","storageRef","storage","ref","put","on","snapshot","bytesTransferred","totalBytes","error","console","log","getDownloadURL","url","updatePosProduct","_id","dialogUpdatePosProduct","removePosProduct","index","row","rows","$confirm","confirmButtonText","cancelButtonText","splice","catch","findPosProductById","doc","cancel","resetForm","popUpAdd","handleThumbImgRemove","popUpUpdate","created","subscribe","computed"],"mappings":"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","sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport firebase from 'firebase';\nconst Compress = require('compress.js')\nexport default {\n  meteor: {\n\n  },\n  mounted() {\n\n  },\n  data() {\n    return {\n      uploadValue: 0,\n      selectedFile: ''\n    }\n  },\n  watch: {\n    currentSize(val) {\n      this.isSearching = true;\n      this.skip = (this.currentPage - 1) * val;\n      this.queryData(this.searchData, this.skip, val + this.skip);\n    },\n    currentPage(val) {\n      this.isSearching = true;\n      this.skip = (val - 1) * this.currentSize;\n      this.queryData(this.searchData, this.skip, this.currentSize + this.skip);\n    },\n    searchData(val) {\n      this.isSearching = true;\n      this.skip = (this.currentPage - 1) * this.currentSize;\n      this.queryData(val, this.skip, this.currentSize + this.skip);\n    },\n    \"posProductForm.categoryId\"(val) {\n      let vm = this;\n      if (this.refForm === \"posProductFormAdd\") {\n        Meteor.call(\"getProductCodeByCateogry\", val,Constants.secret,  (err, result) => {\n          if (!err) {\n            vm.posProductForm.code = result;\n          }\n        })\n      }\n    },\n    'thumbImgCroppa.loading'(val) {\n      if (!val) {\n        this.generateThumbImgUrl();\n      }\n    }\n  },\n  methods: {\n    onFileSelected(e) {\n      let vm = this;\n      this.imgUrl = window.URL.createObjectURL(e.target.files[0]);\n      /* Meteor.setTimeout(function () {\n         vm.onUpload();\n       }, 500);*/\n      let tmpFile = [...e.target.files];\n      const compress = new Compress();\n      compress.compress(tmpFile, {\n        size: 4, // the max size in MB, defaults to 2MB\n        quality: 0.6, // the quality of the image, max is 1,\n        maxWidth: 1920, // the max width of the output image, defaults to 1920px\n        maxHeight: 1920, // the max height of the output image, defaults to 1920px\n        resize: true // defaults to true, set false if you do not want to resize the image width and height\n      }).then((data) => {\n        data.forEach((obj) => {\n          let img1 = obj;\n          let base64str = img1.data;\n          let imgExt = img1.ext;\n          this.selectedFile = Compress.convertBase64ToFile(base64str, imgExt), obj.alt.split(\".\")[0];\n        })\n      })\n    },\n    handleSizeChange(val) {\n      this.currentSize = val;\n    },\n    handleCurrentChange(val) {\n      this.currentPage = val;\n    },\n    queryData: _.debounce(function (val, skip, limit) {\n      this.newLoading = true;\n      Meteor.call('queryPosProduct', {\n        q: val,\n        filter: this.filter,\n        options: {skip: skip || 0, limit: limit || 10},\n        accessToken:Constants.secret,\n      }, (err, result) => {\n        if (!err) {\n          this.posProductData = result.content;\n          this.count = result.countPosProduct;\n        }\n        this.isSearching = false;\n        this.newLoading = false;\n      });\n    }, 300),\n\n    queryCategoryDataOption() {\n      let selector = {};\n      let vm = this;\n      Meteor.call(\"queryCategoryOption\", selector, Constants.secret, (err, result) => {\n        if (result) {\n          vm.categoryDataOption = result;\n        }\n      })\n    },\n    queryUnitDataOption() {\n      let selector = {};\n      let vm = this;\n      Meteor.call(\"queryPosUnitOption\", selector, Constants.secret, (err, result) => {\n        if (result) {\n          vm.unitDataOption = result;\n        }\n      })\n    },\n    savePosProduct(event) {\n      event.preventDefault();\n      let vm = this;\n      this.$refs[\"posProductFormAdd\"].validate((valid) => {\n        if (valid) {\n\n          let imageId = \"\";\n          let imagePath = \"\";\n          if (!!vm.selectedFile) {\n            /*const upload = Images.insert({\n                file: vm.imgUrl,\n                streams: 'dynamic',\n                chunkSize: 'dynamic'\n            }, false);\n\n            upload.on('start', function (error, result) {\n                if (error) {\n                    console.log(error.message);\n                }\n            })\n\n            upload.on('end', function (error, fileObj) {\n                if (error) {\n                    console.log(error.message);\n                } else {\n                    imageId = fileObj._id;\n                    imagePath = fileObj._downloadRoute + \"/\" + fileObj._collectionName + \"/\" + fileObj._id + \"/original/\" + fileObj._id + fileObj.extensionWithDot;\n\n                    let posProductDoc = {\n                        code: vm.posProductForm.code,\n                        name: vm.posProductForm.name,\n                        khName: vm.posProductForm.khName,\n                        productType: vm.posProductForm.productType,\n                        categoryId: vm.posProductForm.categoryId,\n                        whPrice: vm.posProductForm.whPrice,\n                        rePrice: vm.posProductForm.rePrice,\n                        cost: vm.posProductForm.cost,\n                        qtyOnHand: vm.posProductForm.qtyOnHand,\n                        isTaxable: vm.posProductForm.isTaxable,\n                        description: vm.posProductForm.description,\n                        minimumStock: vm.posProductForm.minimumStock,\n                        unitId: vm.posProductForm.unitId,\n                        barcode: vm.posProductForm.barcode,\n                        status: vm.posProductForm.status,\n                        imageId: imageId,\n                        imagePath: imagePath\n\n                    };\n\n                    Meteor.call(\"insertPosProduct\", posProductDoc, (err, result) => {\n                        if (!err) {\n                            vm.$message({\n                                duration: 1000,\n                                message: `Save Successfully!`,\n                                type: 'success'\n                            });\n                            vm.dialogAddPosProduct = false;\n                            vm.queryCategoryDataOption();\n                            if (vm.$refs[\"posProductFormAdd\"]) {\n                                vm.$refs[\"posProductFormAdd\"].resetFields();\n                            }\n\n                            //Image\n\n                            if (vm.imgUrl) {\n                                //const storageRef = firebase.storage().ref(`${this.imageData.name}`).put(vm.imgUrl);\n                                const storageRef = firebase.storage().ref(\"pic1\").put(vm.imgUrl);\n                                storageRef.on(`state_changed`, snapshot => {\n                                        this.uploadValue = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                                    }, error => {\n                                        console.log(error.message)\n                                    },\n                                    () => {\n                                        this.uploadValue = 100;\n                                        storageRef.snapshot.ref.getDownloadURL().then((url) => {\n                                            console.log(url);\n                                        });\n                                    }\n                                );\n                            }\n\n\n                            /!*if (vm.imgUrl) {\n                                const storageRef = storagePath.fileImage(fileImage, Meteor.userId(), result, \"category\");\n                                let uploadTask = storageRef\n                                    .child(\"fileImage\")\n                                    .putString(vm.imgUrl, \"data_url\");\n                                uploadTask.on(\n                                    \"state_changed\",\n                                    function (snapshot) {\n                                        // Observe state change events such as progress, pause, and resume\n                                        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n                                        let progress =\n                                            snapshot.bytesTransferred / snapshot.totalBytes * 100;\n                                        console.log(\"Upload is \" + progress + \"% done\");\n                                        switch (snapshot.state) {\n                                            case firebase.storageState.PAUSED: // or 'paused'\n                                                console.log(\"Upload is paused\");\n                                                break;\n                                            case firebase.storageState.RUNNING: // or 'running'\n                                                console.log(\"Upload is running \" + progress);\n                                                break;\n                                        }\n                                    },\n                                    function (error) {\n                                        /!*setTimeout(() => {\n                                            loading.close();\n                                        }, 1000)*!/\n                                    },\n                                    function () {\n                                        uploadTask.snapshot.ref.getDownloadURL()\n                                            .then(url => {\n                                                console.log(url);\n                                                Meteor.call('sch_updateProductImageURlById', result, url, (err, re) => {\n                                                    if (err) {\n                                                        console.log(err.message);\n                                                    } else {\n                                                        vm.thumbImgCroppa = null;\n                                                    }\n                                                });\n                                            }).catch(err => console.log(err));\n                                    });\n                            }*!/\n\n\n                            // /Image\n\n\n                        } else {\n                            vm.$message({\n                                duration: 1000,\n                                message: err.message,\n                                type: 'error'\n                            });\n                        }\n                    })\n\n                }\n            })\n\n            //upload.start();*/\n\n\n            let posProductDoc = {\n              code: vm.posProductForm.code,\n              name: vm.posProductForm.name,\n              khName: vm.posProductForm.khName,\n              productType: vm.posProductForm.productType,\n              categoryId: vm.posProductForm.categoryId,\n              whPrice: vm.posProductForm.whPrice,\n              rePrice: vm.posProductForm.rePrice,\n              cost: vm.posProductForm.cost,\n              qtyOnHand: vm.posProductForm.qtyOnHand,\n              isTaxable: vm.posProductForm.isTaxable,\n              description: vm.posProductForm.description,\n              minimumStock: vm.posProductForm.minimumStock,\n              barcode: vm.posProductForm.barcode,\n              status: vm.posProductForm.status,\n              unitId: vm.posProductForm.unitId\n\n            };\n\n            Meteor.call(\"insertPosProduct\", posProductDoc,Constants.secret,  (err, result) => {\n              if (!err) {\n                vm.$message({\n                  duration: 1000,\n                  message: `Save Successfully!`,\n                  type: 'success'\n                });\n                vm.dialogAddPosProduct = false;\n                vm.queryCategoryDataOption();\n                if (vm.$refs[\"posProductFormAdd\"]) {\n                  vm.$refs[\"posProductFormAdd\"].resetFields();\n                }\n\n\n                if (!!vm.selectedFile && result) {\n                  //const storageRef = firebase.storage().ref(`${this.imageData.name}`).put(vm.imgUrl);\n\n                  const storageRef = firebase.storage().ref(\"product\" + result).put(vm.selectedFile);\n                  storageRef.on(`state_changed`, snapshot => {\n                        this.uploadValue = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                      }, error => {\n                        console.log(error.message)\n                      },\n                      () => {\n                        this.uploadValue = 100;\n                        storageRef.snapshot.ref.getDownloadURL().then((url) => {\n                          Meteor.call(\"updatePosProductImage\", result, url,Constants.secret,  (err, result) => {\n                            if (err) {\n                              console.log(err.message);\n                            }\n                            vm.selectedFile = \"\";\n                          })\n                        });\n                      }\n                  );\n                }\n              } else {\n                vm.$message({\n                  duration: 1000,\n                  message: err.message,\n                  type: 'error'\n                });\n              }\n            })\n\n\n          } else {\n            let posProductDoc = {\n              code: vm.posProductForm.code,\n              name: vm.posProductForm.name,\n              khName: vm.posProductForm.khName,\n              productType: vm.posProductForm.productType,\n              categoryId: vm.posProductForm.categoryId,\n              whPrice: vm.posProductForm.whPrice,\n              rePrice: vm.posProductForm.rePrice,\n              cost: vm.posProductForm.cost,\n              qtyOnHand: vm.posProductForm.qtyOnHand,\n              isTaxable: vm.posProductForm.isTaxable,\n              description: vm.posProductForm.description,\n              minimumStock: vm.posProductForm.minimumStock,\n              barcode: vm.posProductForm.barcode,\n              status: vm.posProductForm.status,\n              unitId: vm.posProductForm.unitId\n\n            };\n\n            Meteor.call(\"insertPosProduct\", posProductDoc,Constants.secret,  (err, result) => {\n              if (!err) {\n                vm.$message({\n                  duration: 1000,\n                  message: `Save Successfully!`,\n                  type: 'success'\n                });\n                vm.dialogAddPosProduct = false;\n                vm.queryCategoryDataOption();\n                if (vm.$refs[\"posProductFormAdd\"]) {\n                  vm.$refs[\"posProductFormAdd\"].resetFields();\n                }\n              } else {\n                vm.$message({\n                  duration: 1000,\n                  message: err.message,\n                  type: 'error'\n                });\n              }\n            })\n          }\n        }\n      })\n\n    },\n    updatePosProduct() {\n      let vm = this;\n      this.$refs[\"posProductFormUpdate\"].validate((valid) => {\n        if (valid) {\n          if (!!vm.selectedFile) {\n            /*const upload = Images.insert({\n                file: vm.imgUrl,\n                streams: 'dynamic',\n                chunkSize: 'dynamic'\n            }, false);\n\n            upload.on('start', function (error, result) {\n                if (error) {\n                    console.log(error.message);\n                }\n            })\n\n            upload.on('end', function (error, fileObj) {\n                if (error) {\n                    console.log(error.message);\n                } else {\n                    let imageId = fileObj._id;\n                    let imagePath = fileObj._downloadRoute + \"/\" + fileObj._collectionName + \"/\" + fileObj._id + \"/original/\" + fileObj._id + fileObj.extensionWithDot;\n\n                    let posProductDoc = {\n                        _id: vm.posProductForm._id,\n                        code: vm.posProductForm.code,\n                        name: vm.posProductForm.name,\n                        khName: vm.posProductForm.khName,\n                        productType: vm.posProductForm.productType,\n                        categoryId: vm.posProductForm.categoryId,\n                        whPrice: vm.posProductForm.whPrice,\n                        rePrice: vm.posProductForm.rePrice,\n                        cost: vm.posProductForm.cost,\n                        qtyOnHand: vm.posProductForm.qtyOnHand,\n                        isTaxable: vm.posProductForm.isTaxable,\n                        description: vm.posProductForm.description,\n                        minimumStock: vm.posProductForm.minimumStock,\n                        unitId: vm.posProductForm.unitId,\n                        barcode: vm.posProductForm.barcode,\n                        status: vm.posProductForm.status,\n\n\n                        imageId: imageId,\n                        imagePath: imagePath\n                    };\n\n                    Meteor.call(\"updatePosProduct\", posProductDoc, (err, result) => {\n                        if (!err) {\n                            vm.$message({\n                                duration: 1000,\n                                message: `\n        Update\n        Successfully\n        !`,\n                                type: 'success'\n                            });\n                            vm.dialogUpdatePosProduct = false;\n                            vm.queryCategoryDataOption();\n                            if (vm.$refs[\"posProductFormUpdate\"]) {\n                                vm.$refs[\"posProductFormUpdate\"].resetFields();\n                            }\n                        } else {\n                            vm.$message({\n                                duration: 1000,\n                                message: `\n        Update\n        Failed\n        !`,\n                                type: 'error'\n                            });\n                        }\n                    })\n\n                }\n            })\n\n            upload.start();*/\n\n            let posProductDoc = {\n              _id: vm.posProductForm._id,\n              code: vm.posProductForm.code,\n              name: vm.posProductForm.name,\n              khName: vm.posProductForm.khName,\n              productType: vm.posProductForm.productType,\n              categoryId: vm.posProductForm.categoryId,\n              whPrice: vm.posProductForm.whPrice,\n              rePrice: vm.posProductForm.rePrice,\n              cost: vm.posProductForm.cost,\n              qtyOnHand: vm.posProductForm.qtyOnHand,\n              isTaxable: vm.posProductForm.isTaxable,\n              description: vm.posProductForm.description,\n              barcode: vm.posProductForm.barcode,\n              minimumStock: vm.posProductForm.minimumStock,\n              status: vm.posProductForm.status,\n\n              unitId: vm.posProductForm.unitId\n            };\n\n            Meteor.call(\"updatePosProduct\", posProductDoc,Constants.secret,  (err, result) => {\n              if (!err) {\n                vm.$message({\n                  duration: 1000,\n                  message: `\n                        Update\n                        Successfully\n                        !`,\n                  type: 'success'\n                });\n                vm.dialogUpdatePosProduct = false;\n                vm.queryCategoryDataOption();\n                if (vm.$refs[\"posProductFormUpdate\"]) {\n                  vm.$refs[\"posProductFormUpdate\"].resetFields();\n                }\n\n\n                if (!!vm.selectedFile && vm.posProductForm._id) {\n                  //const storageRef = firebase.storage().ref(`${this.imageData.name}`).put(vm.imgUrl);\n                  const storageRef = firebase.storage().ref(\"product\" + vm.posProductForm._id).put(vm.selectedFile);\n                  storageRef.on(`state_changed`, snapshot => {\n                        this.uploadValue = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                      }, error => {\n                        console.log(error.message)\n                      },\n                      () => {\n                        this.uploadValue = 100;\n                        storageRef.snapshot.ref.getDownloadURL().then((url) => {\n                          Meteor.call(\"updatePosProductImage\", vm.posProductForm._id, url, Constants.secret, (err, result) => {\n                            if (err) {\n                              console.log(err.message);\n                            }\n                            vm.selectedFile = \"\";\n                          })\n                        });\n                      }\n                  );\n                }\n              } else {\n                vm.$message({\n                  duration: 1000,\n                  message: `\n                        Update\n                        Failed\n                        !`,\n                  type: 'error'\n                });\n              }\n            })\n\n\n          } else {\n\n\n            let posProductDoc = {\n              _id: vm.posProductForm._id,\n              code: vm.posProductForm.code,\n              name: vm.posProductForm.name,\n              khName: vm.posProductForm.khName,\n              productType: vm.posProductForm.productType,\n              categoryId: vm.posProductForm.categoryId,\n              whPrice: vm.posProductForm.whPrice,\n              rePrice: vm.posProductForm.rePrice,\n              cost: vm.posProductForm.cost,\n              qtyOnHand: vm.posProductForm.qtyOnHand,\n              isTaxable: vm.posProductForm.isTaxable,\n              description: vm.posProductForm.description,\n              barcode: vm.posProductForm.barcode,\n              minimumStock: vm.posProductForm.minimumStock,\n              status: vm.posProductForm.status,\n\n              unitId: vm.posProductForm.unitId\n            };\n\n            Meteor.call(\"updatePosProduct\", posProductDoc,Constants.secret,  (err, result) => {\n              if (!err) {\n                vm.$message({\n                  duration: 1000,\n                  message: `\n                        Update\n                        Successfully\n                        !`,\n                  type: 'success'\n                });\n                vm.dialogUpdatePosProduct = false;\n                vm.queryCategoryDataOption();\n                if (vm.$refs[\"posProductFormUpdate\"]) {\n                  vm.$refs[\"posProductFormUpdate\"].resetFields();\n                }\n              } else {\n                vm.$message({\n                  duration: 1000,\n                  message: `\n                        Update\n                        Failed\n                        !`,\n                  type: 'error'\n                });\n              }\n            })\n          }\n        }\n      })\n\n    },\n    removePosProduct(index, row, rows) {\n      let vm = this;\n      this.$confirm('This will permanently delete the Item. Continue?', 'Warning', {\n        confirmButtonText: 'OK',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      }).then(() => {\n        Meteor.call(\"removePosProduct\", row._id, row.imageId,Constants.secret,  (err, result) => {\n          if (!err) {\n            rows.splice(index, 1);\n\n            vm.$message({\n              message: `\n                        លុប ${row.code} : ${row.name} បានជោគជ័យ`,\n              type: 'success'\n            });\n\n            vm.queryCategoryDataOption();\n          } else {\n            vm.$message({\n              type: 'error',\n              message: 'Delete Fialed'\n            });\n          }\n\n        })\n\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: 'Delete canceled'\n        });\n      });\n\n\n    },\n    findPosProductById(doc) {\n      let vm = this;\n      vm.posProductForm = {};\n\n      Meteor.call(\"queryPosProductById\", doc.row._id, Constants.secret, (err, result) => {\n        if (result) {\n          vm.posProductForm._id = result._id;\n          vm.posProductForm = result;\n          vm.imgUrl = result.imagePath || \"\";\n          this.queryCategoryDataOption();\n        }\n      })\n    },\n    cancel() {\n      this.$message({\n        type: 'info',\n        message: 'Canceled'\n      });\n    },\n    resetForm() {\n      this.posProductForm._id = \"\";\n      this.refForm = \"\";\n      this.queryCategoryDataOption();\n      if (this.$refs[\"posProductFormAdd\"]) {\n        this.$refs[\"posProductFormAdd\"].resetFields();\n      }\n\n      if (this.$refs[\"posProductFormUpdate\"]) {\n        this.$refs[\"posProductFormUpdate\"].resetFields();\n      }\n\n    },\n    popUpAdd() {\n      this.refForm = \"posProductFormAdd\";\n      this.handleThumbImgRemove();\n    },\n    popUpUpdate() {\n      this.refForm = \"posProductFormUpdate\";\n\n\n    },\n\n  },\n  created() {\n    this.isSearching = true;\n    this.queryCategoryDataOption();\n    this.queryUnitDataOption();\n    this.queryData();\n    Meteor.subscribe('Pos_ProductReact');\n\n  },\n  computed: {\n\n  }\n}\n"]},"sourceType":"script","hash":"285e734c9876c873a04e1f9c8ccf346362bca378"}
