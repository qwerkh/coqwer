{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/medicineBarcode.vue","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/medicineBarcode.vue","filename":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/medicineBarcode.vue","passPerPreset":false,"envName":"development","cwd":"/home/snr/Desktop/Project/cosmetic","root":"/home/snr/Desktop/Project/cosmetic","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/medicineBarcode.vue","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/medicineBarcode.vue"}},"code":"module.exportDefault({\n  data: function () {\n    return {\n      medicineBarcodeReport: {\n        roleBranchOptionsModel: [],\n        roleAreaOptionsModel: []\n      },\n      inl: true,\n      roleBranchOptions: [],\n      roleAreaOptions: [],\n      activeName: \"1\",\n      medicineBarcodesData: {},\n      loading: false,\n      branchHeader: \"All\",\n      printLoading: false\n    };\n  },\n  methods: {\n    fetchBranchOption: function () {\n      var _this = this;\n\n      Meteor.call(\"fetchRolesBranch\", Meteor.userId(), function (err, result) {\n        _this.roleBranchOptions = result;\n      });\n    },\n    fetchAreaOption: function (val) {\n      var _this2 = this;\n\n      Meteor.call(\"fetchRolesAreaByMultiRoleBranch\", Meteor.userId(), val, function (err, result) {\n        _this2.roleAreaOptions = result;\n      });\n    },\n    fetchPatientOption: function (val) {\n      var _this3 = this;\n\n      Meteor.call(\"fetchPatientOption\", val, function (err, result) {\n        _this3.patientOptions = result;\n      });\n    },\n    handleRunReport: function (formName) {\n      var _this4 = this;\n\n      var params = {};\n      var userId = Meteor.userId();\n      this.loading = true;\n\n      if (this.medicineBarcodeReport.roleAreaOptionsModel != \"\") {\n        params.rolesArea = {\n          $in: this.medicineBarcodeReport.roleAreaOptionsModel\n        };\n        Meteor.call(\"getBranchHeader\", this.medicineBarcodeReport.roleAreaOptionsModel, function (err, result) {\n          _this4.branchHeader = result;\n        });\n      }\n\n      if (this.medicineBarcodeReport.dateRange != \"\") {\n        params.medicineBarcodeDate = {\n          $gte: moment(this.medicineBarcodeReport.dateRange[0]).startOf(\"days\").toDate(),\n          $lte: moment(this.medicineBarcodeReport.dateRange[1]).endOf(\"days\").toDate()\n        };\n        this.dateRangeHeader = moment(this.medicineBarcodeReport.dateRange[0]).format(\"DD/MM/YYYY\") + \"-\" + moment(this.medicineBarcodeReport.dateRange[1]).format(\"DD/MM/YYYY\");\n      }\n\n      if (this.medicineBarcodeReport.patientOptionsModel != \"\") {\n        params.patientId = {\n          $in: this.medicineBarcodeReport.patientOptionsModel\n        };\n      }\n\n      if (this.medicineBarcodeReport.typeOptionsModel != \"\") {\n        params.status = {\n          $in: this.medicineBarcodeReport.typeOptionsModel\n        };\n      }\n\n      Meteor.call('giveMeRegisterReport', params, userId, function (err, result) {\n        if (!err) {\n          _this4.medicineBarcodesData = result;\n        }\n\n        _this4.loading = false;\n      });\n    },\n    PrintReport: function () {\n      window.print();\n    }\n  },\n  watch: {\n    \"medicineBarcodeReport.roleBranchOptionsModel\": function (val) {\n      this.fetchAreaOption(val);\n    },\n    \"medicineBarcodeReport.roleAreaOptionsModel\": function (val) {\n      this.fetchPatientOption(val);\n    }\n  },\n  created: function () {\n    this.fetchBranchOption(); //            this.fetchPatientOption([]);\n\n    this.fetchTypeOption([]);\n    this.getCompany();\n    this.medicineBarcodeReport.dateRange = [moment().startOf(\"months\").toDate(), moment().endOf(\"months\").toDate()];\n  },\n  computed: {\n    dataExist: function () {\n      return this.medicineBarcodesData && this.medicineBarcodesData.data && this.medicineBarcodesData.data.length > 0;\n    }\n  }\n});","map":{"version":3,"sources":["/home/snr/Desktop/Project/cosmetic/imports/vue/ui/medicineBarcode.vue"],"names":["module","exportDefault","data","medicineBarcodeReport","roleBranchOptionsModel","roleAreaOptionsModel","inl","roleBranchOptions","roleAreaOptions","activeName","medicineBarcodesData","loading","branchHeader","printLoading","methods","fetchBranchOption","Meteor","call","userId","err","result","fetchAreaOption","val","fetchPatientOption","patientOptions","handleRunReport","formName","params","rolesArea","$in","dateRange","medicineBarcodeDate","$gte","moment","startOf","toDate","$lte","endOf","dateRangeHeader","format","patientOptionsModel","patientId","typeOptionsModel","status","PrintReport","window","print","watch","created","fetchTypeOption","getCompany","computed","dataExist","length"],"mappings":"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","sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    export default {\n        data() {\n            return {\n                medicineBarcodeReport: {\n                    roleBranchOptionsModel: [],\n                    roleAreaOptionsModel: [],\n                },\n                inl: true,\n                roleBranchOptions: [],\n                roleAreaOptions: [],\n                activeName: \"1\",\n                medicineBarcodesData: {},\n                loading: false,\n\n                branchHeader: \"All\",\n                printLoading: false,\n            }\n        },\n        methods: {\n            fetchBranchOption() {\n                Meteor.call(\"fetchRolesBranch\", Meteor.userId(), (err, result) => {\n                    this.roleBranchOptions = result;\n                })\n            },\n            fetchAreaOption(val) {\n                Meteor.call(\"fetchRolesAreaByMultiRoleBranch\", Meteor.userId(), val, (err, result) => {\n                    this.roleAreaOptions = result;\n                })\n            },\n            fetchPatientOption(val) {\n                Meteor.call(\"fetchPatientOption\", val, (err, result) => {\n                    this.patientOptions = result;\n                })\n            },\n            handleRunReport(formName) {\n\n                let params = {};\n                let userId = Meteor.userId();\n\n                this.loading = true;\n                if (this.medicineBarcodeReport.roleAreaOptionsModel != \"\") {\n                    params.rolesArea = {$in: this.medicineBarcodeReport.roleAreaOptionsModel};\n\n                    Meteor.call(\"getBranchHeader\", this.medicineBarcodeReport.roleAreaOptionsModel, (err, result) => {\n                        this.branchHeader = result;\n                    })\n                }\n\n                if (this.medicineBarcodeReport.dateRange != \"\") {\n                    params.medicineBarcodeDate = {\n                        $gte: moment(this.medicineBarcodeReport.dateRange[0]).startOf(\"days\").toDate(),\n                        $lte: moment(this.medicineBarcodeReport.dateRange[1]).endOf(\"days\").toDate()\n                    };\n\n                    this.dateRangeHeader = moment(this.medicineBarcodeReport.dateRange[0]).format(\"DD/MM/YYYY\") + \"-\" + moment(this.medicineBarcodeReport.dateRange[1]).format(\"DD/MM/YYYY\");\n                }\n\n                if (this.medicineBarcodeReport.patientOptionsModel != \"\") {\n                    params.patientId = {$in: this.medicineBarcodeReport.patientOptionsModel};\n                }\n\n                if (this.medicineBarcodeReport.typeOptionsModel != \"\") {\n                    params.status = {$in: this.medicineBarcodeReport.typeOptionsModel};\n                }\n\n\n                Meteor.call('giveMeRegisterReport', params, userId, (err, result) => {\n                    if (!err) {\n                        this.medicineBarcodesData = result;\n                    }\n                    this.loading = false;\n                });\n\n\n            },\n            PrintReport() {\n                window.print();\n            }\n        },\n        watch: {\n\n\n            \"medicineBarcodeReport.roleBranchOptionsModel\"(val) {\n                this.fetchAreaOption(val);\n            }\n            ,\n            \"medicineBarcodeReport.roleAreaOptionsModel\"(val) {\n                this.fetchPatientOption(val);\n            }\n\n        },\n        created() {\n            this.fetchBranchOption();\n//            this.fetchPatientOption([]);\n            this.fetchTypeOption([]);\n            this.getCompany();\n            this.medicineBarcodeReport.dateRange = [moment().startOf(\"months\").toDate(), moment().endOf(\"months\").toDate()];\n\n\n        },\n        computed: {\n            dataExist() {\n                return this.medicineBarcodesData && this.medicineBarcodesData.data && this.medicineBarcodesData.data.length > 0;\n            }\n        },\n\n    }\n"]},"sourceType":"script","hash":"bdcade5378ff4db8b425b909586b497692379a09"}
