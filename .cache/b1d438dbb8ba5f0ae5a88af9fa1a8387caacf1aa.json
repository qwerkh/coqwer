{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/patientImage.vue","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/patientImage.vue","filename":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/patientImage.vue","passPerPreset":false,"envName":"development","cwd":"/home/snr/Desktop/Project/cosmetic","root":"/home/snr/Desktop/Project/cosmetic","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/patientImage.vue","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"/home/snr/Desktop/Project/cosmetic/imports/vue/ui/patientImage.vue"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar firebase;\nmodule.link(\"firebase\", {\n  \"default\": function (v) {\n    firebase = v;\n  }\n}, 0);\n\nvar Compress = require('compress.js');\n\nmodule.exportDefault({\n  meteor: {\n    langSession: function () {\n      return Session.get('lang') || \"en\";\n    },\n    disabledRemove: function () {\n      return Session.get(\"canRemove\");\n    },\n    disabledUpdate: function () {\n      return Session.get(\"canUpdate\");\n    },\n    newRe: function () {\n      var vm = this;\n      Pos_ProductReact.find({}).fetch();\n      vm.queryData(vm.searchData, vm.skip, vm.currentSize + vm.skip);\n    },\n    isCoffee: function () {\n      var ma = Manage_Module.findOne();\n\n      if (ma && ma.feature) {\n        return (ma.feature.indexOf(\"Coffee\") > -1 ? true : false) || (ma.feature.indexOf(\"Restaurant\") > -1 ? true : false);\n      }\n\n      return false;\n    }\n  },\n  mounted: function () {\n    this.$jQuery('body').off();\n    this.$jQuery('body').on('focus', 'input[type=number]', function (e) {\n      $(this).on('wheel', function (e) {\n        e.preventDefault();\n      });\n    });\n  },\n  data: function () {\n    return {\n      newLoading: true,\n      dialogImageUrl: \"\",\n      dialogVisible: false,\n      isloadingImage: false,\n      thumbImgCroppa: null,\n      imgUrl: \"\",\n      imgUrlUpdate: \"\",\n      refForm: \"\",\n      posProductData: [],\n      loading: false,\n      searchData: '',\n      isSearching: false,\n      currentPage: 1,\n      currentSize: 10,\n      count: 0,\n      dialogAddPosProduct: false,\n      dialogUpdatePosProduct: false,\n      posProductForm: {\n        name: \"\",\n        khName: \"\",\n        code: \"\",\n        description: \"\",\n        categoryId: \"\",\n        productType: \"Inventory\",\n        isTaxable: false,\n        qtyOnHand: 0,\n        whPrice: 0,\n        rePrice: 0,\n        cost: 0,\n        _id: \"\",\n        minimumStock: \"\",\n        barcode: \"\",\n        unitId: \"\",\n        status: false\n      },\n      rules: {\n        name: [{\n          required: true,\n          message: 'Please input name',\n          trigger: 'blur'\n        }],\n        unitId: [{\n          required: true,\n          message: 'Please input Unit',\n          trigger: 'change'\n        }],\n        categoryId: [{\n          required: true,\n          message: 'Please input Category',\n          trigger: 'change'\n        }],\n        code: [{\n          required: true,\n          message: 'Please input code',\n          trigger: 'blur'\n        }]\n      },\n      categoryDataOption: [],\n      unitDataOption: [],\n      productpTypeOption: [{\n        label: \"Inventory\",\n        value: \"Inventory\"\n      }, // {label: \"Non Inventory\", value: \"Non Inventory\"},\n      {\n        label: \"Service\",\n        value: \"Service\"\n      }],\n      skip: 0,\n      uploadValue: 0,\n      selectedFile: ''\n    };\n  },\n  watch: {\n    currentSize: function (val) {\n      this.isSearching = true;\n      this.skip = (this.currentPage - 1) * val;\n      this.queryData(this.searchData, this.skip, val + this.skip);\n    },\n    currentPage: function (val) {\n      this.isSearching = true;\n      this.skip = (val - 1) * this.currentSize;\n      this.queryData(this.searchData, this.skip, this.currentSize + this.skip);\n    },\n    searchData: function (val) {\n      this.isSearching = true;\n      this.skip = (this.currentPage - 1) * this.currentSize;\n      this.queryData(val, this.skip, this.currentSize + this.skip);\n    },\n    \"posProductForm.categoryId\": function (val) {\n      var vm = this;\n\n      if (this.refForm === \"posProductFormAdd\") {\n        Meteor.call(\"getProductCodeByCateogry\", val, Constants.secret, function (err, result) {\n          if (!err) {\n            vm.posProductForm.code = result;\n          }\n        });\n      }\n    },\n    'thumbImgCroppa.loading': function (val) {\n      if (!val) {\n        this.generateThumbImgUrl();\n      }\n    }\n  },\n  methods: {\n    onFileSelected: function (e) {\n      var _this = this;\n\n      var vm = this;\n      this.imgUrl = window.URL.createObjectURL(e.target.files[0]);\n      /* Meteor.setTimeout(function () {\n         vm.onUpload();\n       }, 500);*/\n\n      var tmpFile = (0, _toConsumableArray2.default)(e.target.files);\n      var compress = new Compress();\n      compress.compress(tmpFile, {\n        size: 4,\n        // the max size in MB, defaults to 2MB\n        quality: 0.6,\n        // the quality of the image, max is 1,\n        maxWidth: 1920,\n        // the max width of the output image, defaults to 1920px\n        maxHeight: 1920,\n        // the max height of the output image, defaults to 1920px\n        resize: true // defaults to true, set false if you do not want to resize the image width and height\n\n      }).then(function (data) {\n        data.forEach(function (obj) {\n          var img1 = obj;\n          var base64str = img1.data;\n          var imgExt = img1.ext;\n          _this.selectedFile = Compress.convertBase64ToFile(base64str, imgExt), obj.alt.split(\".\")[0];\n        });\n      });\n    },\n    handleSizeChange: function (val) {\n      this.currentSize = val;\n    },\n    handleCurrentChange: function (val) {\n      this.currentPage = val;\n    },\n    queryData: _.debounce(function (val, skip, limit) {\n      var _this2 = this;\n\n      this.newLoading = true;\n      Meteor.call('queryPosProduct', {\n        q: val,\n        filter: this.filter,\n        options: {\n          skip: skip || 0,\n          limit: limit || 10\n        },\n        accessToken: Constants.secret\n      }, function (err, result) {\n        if (!err) {\n          _this2.posProductData = result.content;\n          _this2.count = result.countPosProduct;\n        }\n\n        _this2.isSearching = false;\n        _this2.newLoading = false;\n      });\n    }, 300),\n    queryCategoryDataOption: function () {\n      var selector = {};\n      var vm = this;\n      Meteor.call(\"queryCategoryOption\", selector, Constants.secret, function (err, result) {\n        if (result) {\n          vm.categoryDataOption = result;\n        }\n      });\n    },\n    queryUnitDataOption: function () {\n      var selector = {};\n      var vm = this;\n      Meteor.call(\"queryPosUnitOption\", selector, Constants.secret, function (err, result) {\n        if (result) {\n          vm.unitDataOption = result;\n        }\n      });\n    },\n    savePosProduct: function (event) {\n      var _this3 = this;\n\n      event.preventDefault();\n      var vm = this;\n      this.$refs[\"posProductFormAdd\"].validate(function (valid) {\n        if (valid) {\n          var imageId = \"\";\n          var imagePath = \"\";\n\n          if (!!vm.selectedFile) {\n            /*const upload = Images.insert({\n                file: vm.imgUrl,\n                streams: 'dynamic',\n                chunkSize: 'dynamic'\n            }, false);\n             upload.on('start', function (error, result) {\n                if (error) {\n                    console.log(error.message);\n                }\n            })\n             upload.on('end', function (error, fileObj) {\n                if (error) {\n                    console.log(error.message);\n                } else {\n                    imageId = fileObj._id;\n                    imagePath = fileObj._downloadRoute + \"/\" + fileObj._collectionName + \"/\" + fileObj._id + \"/original/\" + fileObj._id + fileObj.extensionWithDot;\n                     let posProductDoc = {\n                        code: vm.posProductForm.code,\n                        name: vm.posProductForm.name,\n                        khName: vm.posProductForm.khName,\n                        productType: vm.posProductForm.productType,\n                        categoryId: vm.posProductForm.categoryId,\n                        whPrice: vm.posProductForm.whPrice,\n                        rePrice: vm.posProductForm.rePrice,\n                        cost: vm.posProductForm.cost,\n                        qtyOnHand: vm.posProductForm.qtyOnHand,\n                        isTaxable: vm.posProductForm.isTaxable,\n                        description: vm.posProductForm.description,\n                        minimumStock: vm.posProductForm.minimumStock,\n                        unitId: vm.posProductForm.unitId,\n                        barcode: vm.posProductForm.barcode,\n                        status: vm.posProductForm.status,\n                        imageId: imageId,\n                        imagePath: imagePath\n                     };\n                     Meteor.call(\"insertPosProduct\", posProductDoc, (err, result) => {\n                        if (!err) {\n                            vm.$message({\n                                duration: 1000,\n                                message: `Save Successfully!`,\n                                type: 'success'\n                            });\n                            vm.dialogAddPosProduct = false;\n                            vm.queryCategoryDataOption();\n                            if (vm.$refs[\"posProductFormAdd\"]) {\n                                vm.$refs[\"posProductFormAdd\"].resetFields();\n                            }\n                             //Image\n                             if (vm.imgUrl) {\n                                //const storageRef = firebase.storage().ref(`${this.imageData.name}`).put(vm.imgUrl);\n                                const storageRef = firebase.storage().ref(\"pic1\").put(vm.imgUrl);\n                                storageRef.on(`state_changed`, snapshot => {\n                                        this.uploadValue = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                                    }, error => {\n                                        console.log(error.message)\n                                    },\n                                    () => {\n                                        this.uploadValue = 100;\n                                        storageRef.snapshot.ref.getDownloadURL().then((url) => {\n                                            console.log(url);\n                                        });\n                                    }\n                                );\n                            }\n                              /!*if (vm.imgUrl) {\n                                const storageRef = storagePath.fileImage(fileImage, Meteor.userId(), result, \"category\");\n                                let uploadTask = storageRef\n                                    .child(\"fileImage\")\n                                    .putString(vm.imgUrl, \"data_url\");\n                                uploadTask.on(\n                                    \"state_changed\",\n                                    function (snapshot) {\n                                        // Observe state change events such as progress, pause, and resume\n                                        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n                                        let progress =\n                                            snapshot.bytesTransferred / snapshot.totalBytes * 100;\n                                        console.log(\"Upload is \" + progress + \"% done\");\n                                        switch (snapshot.state) {\n                                            case firebase.storageState.PAUSED: // or 'paused'\n                                                console.log(\"Upload is paused\");\n                                                break;\n                                            case firebase.storageState.RUNNING: // or 'running'\n                                                console.log(\"Upload is running \" + progress);\n                                                break;\n                                        }\n                                    },\n                                    function (error) {\n                                        /!*setTimeout(() => {\n                                            loading.close();\n                                        }, 1000)*!/\n                                    },\n                                    function () {\n                                        uploadTask.snapshot.ref.getDownloadURL()\n                                            .then(url => {\n                                                console.log(url);\n                                                Meteor.call('sch_updateProductImageURlById', result, url, (err, re) => {\n                                                    if (err) {\n                                                        console.log(err.message);\n                                                    } else {\n                                                        vm.thumbImgCroppa = null;\n                                                    }\n                                                });\n                                            }).catch(err => console.log(err));\n                                    });\n                            }*!/\n                              // /Image\n                          } else {\n                            vm.$message({\n                                duration: 1000,\n                                message: err.message,\n                                type: 'error'\n                            });\n                        }\n                    })\n                 }\n            })\n             //upload.start();*/\n            var posProductDoc = {\n              code: vm.posProductForm.code,\n              name: vm.posProductForm.name,\n              khName: vm.posProductForm.khName,\n              productType: vm.posProductForm.productType,\n              categoryId: vm.posProductForm.categoryId,\n              whPrice: vm.posProductForm.whPrice,\n              rePrice: vm.posProductForm.rePrice,\n              cost: vm.posProductForm.cost,\n              qtyOnHand: vm.posProductForm.qtyOnHand,\n              isTaxable: vm.posProductForm.isTaxable,\n              description: vm.posProductForm.description,\n              minimumStock: vm.posProductForm.minimumStock,\n              barcode: vm.posProductForm.barcode,\n              status: vm.posProductForm.status,\n              unitId: vm.posProductForm.unitId\n            };\n            Meteor.call(\"insertPosProduct\", posProductDoc, Constants.secret, function (err, result) {\n              if (!err) {\n                vm.$message({\n                  duration: 1000,\n                  message: \"Save Successfully!\",\n                  type: 'success'\n                });\n                vm.dialogAddPosProduct = false;\n                vm.queryCategoryDataOption();\n\n                if (vm.$refs[\"posProductFormAdd\"]) {\n                  vm.$refs[\"posProductFormAdd\"].resetFields();\n                }\n\n                if (!!vm.selectedFile && result) {\n                  //const storageRef = firebase.storage().ref(`${this.imageData.name}`).put(vm.imgUrl);\n                  var storageRef = firebase.storage().ref(\"product\" + result).put(vm.selectedFile);\n                  storageRef.on(\"state_changed\", function (snapshot) {\n                    _this3.uploadValue = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n                  }, function (error) {\n                    console.log(error.message);\n                  }, function () {\n                    _this3.uploadValue = 100;\n                    storageRef.snapshot.ref.getDownloadURL().then(function (url) {\n                      Meteor.call(\"updatePosProductImage\", result, url, Constants.secret, function (err, result) {\n                        if (err) {\n                          console.log(err.message);\n                        }\n\n                        vm.selectedFile = \"\";\n                      });\n                    });\n                  });\n                }\n              } else {\n                vm.$message({\n                  duration: 1000,\n                  message: err.message,\n                  type: 'error'\n                });\n              }\n            });\n          } else {\n            var _posProductDoc = {\n              code: vm.posProductForm.code,\n              name: vm.posProductForm.name,\n              khName: vm.posProductForm.khName,\n              productType: vm.posProductForm.productType,\n              categoryId: vm.posProductForm.categoryId,\n              whPrice: vm.posProductForm.whPrice,\n              rePrice: vm.posProductForm.rePrice,\n              cost: vm.posProductForm.cost,\n              qtyOnHand: vm.posProductForm.qtyOnHand,\n              isTaxable: vm.posProductForm.isTaxable,\n              description: vm.posProductForm.description,\n              minimumStock: vm.posProductForm.minimumStock,\n              barcode: vm.posProductForm.barcode,\n              status: vm.posProductForm.status,\n              unitId: vm.posProductForm.unitId\n            };\n            Meteor.call(\"insertPosProduct\", _posProductDoc, Constants.secret, function (err, result) {\n              if (!err) {\n                vm.$message({\n                  duration: 1000,\n                  message: \"Save Successfully!\",\n                  type: 'success'\n                });\n                vm.dialogAddPosProduct = false;\n                vm.queryCategoryDataOption();\n\n                if (vm.$refs[\"posProductFormAdd\"]) {\n                  vm.$refs[\"posProductFormAdd\"].resetFields();\n                }\n              } else {\n                vm.$message({\n                  duration: 1000,\n                  message: err.message,\n                  type: 'error'\n                });\n              }\n            });\n          }\n        }\n      });\n    },\n    updatePosProduct: function () {\n      var _this4 = this;\n\n      var vm = this;\n      this.$refs[\"posProductFormUpdate\"].validate(function (valid) {\n        if (valid) {\n          if (!!vm.selectedFile) {\n            /*const upload = Images.insert({\n                file: vm.imgUrl,\n                streams: 'dynamic',\n                chunkSize: 'dynamic'\n            }, false);\n             upload.on('start', function (error, result) {\n                if (error) {\n                    console.log(error.message);\n                }\n            })\n             upload.on('end', function (error, fileObj) {\n                if (error) {\n                    console.log(error.message);\n                } else {\n                    let imageId = fileObj._id;\n                    let imagePath = fileObj._downloadRoute + \"/\" + fileObj._collectionName + \"/\" + fileObj._id + \"/original/\" + fileObj._id + fileObj.extensionWithDot;\n                     let posProductDoc = {\n                        _id: vm.posProductForm._id,\n                        code: vm.posProductForm.code,\n                        name: vm.posProductForm.name,\n                        khName: vm.posProductForm.khName,\n                        productType: vm.posProductForm.productType,\n                        categoryId: vm.posProductForm.categoryId,\n                        whPrice: vm.posProductForm.whPrice,\n                        rePrice: vm.posProductForm.rePrice,\n                        cost: vm.posProductForm.cost,\n                        qtyOnHand: vm.posProductForm.qtyOnHand,\n                        isTaxable: vm.posProductForm.isTaxable,\n                        description: vm.posProductForm.description,\n                        minimumStock: vm.posProductForm.minimumStock,\n                        unitId: vm.posProductForm.unitId,\n                        barcode: vm.posProductForm.barcode,\n                        status: vm.posProductForm.status,\n                          imageId: imageId,\n                        imagePath: imagePath\n                    };\n                     Meteor.call(\"updatePosProduct\", posProductDoc, (err, result) => {\n                        if (!err) {\n                            vm.$message({\n                                duration: 1000,\n                                message: `\n            Update\n            Successfully\n            !`,\n                                type: 'success'\n                            });\n                            vm.dialogUpdatePosProduct = false;\n                            vm.queryCategoryDataOption();\n                            if (vm.$refs[\"posProductFormUpdate\"]) {\n                                vm.$refs[\"posProductFormUpdate\"].resetFields();\n                            }\n                        } else {\n                            vm.$message({\n                                duration: 1000,\n                                message: `\n            Update\n            Failed\n            !`,\n                                type: 'error'\n                            });\n                        }\n                    })\n                 }\n            })\n             upload.start();*/\n            var posProductDoc = {\n              _id: vm.posProductForm._id,\n              code: vm.posProductForm.code,\n              name: vm.posProductForm.name,\n              khName: vm.posProductForm.khName,\n              productType: vm.posProductForm.productType,\n              categoryId: vm.posProductForm.categoryId,\n              whPrice: vm.posProductForm.whPrice,\n              rePrice: vm.posProductForm.rePrice,\n              cost: vm.posProductForm.cost,\n              qtyOnHand: vm.posProductForm.qtyOnHand,\n              isTaxable: vm.posProductForm.isTaxable,\n              description: vm.posProductForm.description,\n              barcode: vm.posProductForm.barcode,\n              minimumStock: vm.posProductForm.minimumStock,\n              status: vm.posProductForm.status,\n              unitId: vm.posProductForm.unitId\n            };\n            Meteor.call(\"updatePosProduct\", posProductDoc, Constants.secret, function (err, result) {\n              if (!err) {\n                vm.$message({\n                  duration: 1000,\n                  message: \"\\n                        Update\\n                        Successfully\\n                        !\",\n                  type: 'success'\n                });\n                vm.dialogUpdatePosProduct = false;\n                vm.queryCategoryDataOption();\n\n                if (vm.$refs[\"posProductFormUpdate\"]) {\n                  vm.$refs[\"posProductFormUpdate\"].resetFields();\n                }\n\n                if (!!vm.selectedFile && vm.posProductForm._id) {\n                  //const storageRef = firebase.storage().ref(`${this.imageData.name}`).put(vm.imgUrl);\n                  var storageRef = firebase.storage().ref(\"product\" + vm.posProductForm._id).put(vm.selectedFile);\n                  storageRef.on(\"state_changed\", function (snapshot) {\n                    _this4.uploadValue = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n                  }, function (error) {\n                    console.log(error.message);\n                  }, function () {\n                    _this4.uploadValue = 100;\n                    storageRef.snapshot.ref.getDownloadURL().then(function (url) {\n                      Meteor.call(\"updatePosProductImage\", vm.posProductForm._id, url, Constants.secret, function (err, result) {\n                        if (err) {\n                          console.log(err.message);\n                        }\n\n                        vm.selectedFile = \"\";\n                      });\n                    });\n                  });\n                }\n              } else {\n                vm.$message({\n                  duration: 1000,\n                  message: \"\\n                        Update\\n                        Failed\\n                        !\",\n                  type: 'error'\n                });\n              }\n            });\n          } else {\n            var _posProductDoc2 = {\n              _id: vm.posProductForm._id,\n              code: vm.posProductForm.code,\n              name: vm.posProductForm.name,\n              khName: vm.posProductForm.khName,\n              productType: vm.posProductForm.productType,\n              categoryId: vm.posProductForm.categoryId,\n              whPrice: vm.posProductForm.whPrice,\n              rePrice: vm.posProductForm.rePrice,\n              cost: vm.posProductForm.cost,\n              qtyOnHand: vm.posProductForm.qtyOnHand,\n              isTaxable: vm.posProductForm.isTaxable,\n              description: vm.posProductForm.description,\n              barcode: vm.posProductForm.barcode,\n              minimumStock: vm.posProductForm.minimumStock,\n              status: vm.posProductForm.status,\n              unitId: vm.posProductForm.unitId\n            };\n            Meteor.call(\"updatePosProduct\", _posProductDoc2, Constants.secret, function (err, result) {\n              if (!err) {\n                vm.$message({\n                  duration: 1000,\n                  message: \"\\n                        Update\\n                        Successfully\\n                        !\",\n                  type: 'success'\n                });\n                vm.dialogUpdatePosProduct = false;\n                vm.queryCategoryDataOption();\n\n                if (vm.$refs[\"posProductFormUpdate\"]) {\n                  vm.$refs[\"posProductFormUpdate\"].resetFields();\n                }\n              } else {\n                vm.$message({\n                  duration: 1000,\n                  message: \"\\n                        Update\\n                        Failed\\n                        !\",\n                  type: 'error'\n                });\n              }\n            });\n          }\n        }\n      });\n    },\n    removePosProduct: function (index, row, rows) {\n      var _this5 = this;\n\n      var vm = this;\n      this.$confirm('This will permanently delete the Item. Continue?', 'Warning', {\n        confirmButtonText: 'OK',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      }).then(function () {\n        Meteor.call(\"removePosProduct\", row._id, row.imageId, Constants.secret, function (err, result) {\n          if (!err) {\n            rows.splice(index, 1);\n            vm.$message({\n              message: \"\\n                        \\u179B\\u17BB\\u1794 \" + row.code + \" : \" + row.name + \" \\u1794\\u17B6\\u1793\\u1787\\u17C4\\u1782\\u1787\\u17D0\\u1799\",\n              type: 'success'\n            });\n            vm.queryCategoryDataOption();\n          } else {\n            vm.$message({\n              type: 'error',\n              message: 'Delete Fialed'\n            });\n          }\n        });\n      }).catch(function () {\n        _this5.$message({\n          type: 'info',\n          message: 'Delete canceled'\n        });\n      });\n    },\n    findPosProductById: function (doc) {\n      var _this6 = this;\n\n      var vm = this;\n      vm.posProductForm = {};\n      Meteor.call(\"queryPosProductById\", doc.row._id, Constants.secret, function (err, result) {\n        if (result) {\n          vm.posProductForm._id = result._id;\n          vm.posProductForm = result;\n          vm.imgUrl = result.imagePath || \"\";\n\n          _this6.queryCategoryDataOption();\n        }\n      });\n    },\n    cancel: function () {\n      this.$message({\n        type: 'info',\n        message: 'Canceled'\n      });\n    },\n    resetForm: function () {\n      this.posProductForm._id = \"\";\n      this.refForm = \"\";\n      this.queryCategoryDataOption();\n\n      if (this.$refs[\"posProductFormAdd\"]) {\n        this.$refs[\"posProductFormAdd\"].resetFields();\n      }\n\n      if (this.$refs[\"posProductFormUpdate\"]) {\n        this.$refs[\"posProductFormUpdate\"].resetFields();\n      }\n    },\n    popUpAdd: function () {\n      this.refForm = \"posProductFormAdd\";\n      this.handleThumbImgRemove();\n    },\n    popUpUpdate: function () {\n      this.refForm = \"posProductFormUpdate\";\n    }\n  },\n  created: function () {\n    this.isSearching = true;\n    this.queryCategoryDataOption();\n    this.queryUnitDataOption();\n    this.queryData();\n    Meteor.subscribe('Pos_ProductReact');\n  },\n  computed: {}\n});","map":{"version":3,"sources":["/home/snr/Desktop/Project/cosmetic/imports/vue/ui/patientImage.vue"],"names":["firebase","module","link","v","Compress","require","exportDefault","meteor","langSession","Session","get","disabledRemove","disabledUpdate","newRe","vm","Pos_ProductReact","find","fetch","queryData","searchData","skip","currentSize","isCoffee","ma","Manage_Module","findOne","feature","indexOf","mounted","$jQuery","off","on","e","$","preventDefault","data","newLoading","dialogImageUrl","dialogVisible","isloadingImage","thumbImgCroppa","imgUrl","imgUrlUpdate","refForm","posProductData","loading","isSearching","currentPage","count","dialogAddPosProduct","dialogUpdatePosProduct","posProductForm","name","khName","code","description","categoryId","productType","isTaxable","qtyOnHand","whPrice","rePrice","cost","_id","minimumStock","barcode","unitId","status","rules","required","message","trigger","categoryDataOption","unitDataOption","productpTypeOption","label","value","uploadValue","selectedFile","watch","val","Meteor","call","Constants","secret","err","result","generateThumbImgUrl","methods","onFileSelected","window","URL","createObjectURL","target","files","tmpFile","compress","size","quality","maxWidth","maxHeight","resize","then","forEach","obj","img1","base64str","imgExt","ext","convertBase64ToFile","alt","split","handleSizeChange","handleCurrentChange","_","debounce","limit","q","filter","options","accessToken","content","countPosProduct","queryCategoryDataOption","selector","queryUnitDataOption","savePosProduct","event","$refs","validate","valid","imageId","imagePath","posProductDoc","$message","duration","type","resetFields","storageRef","storage","ref","put","snapshot","bytesTransferred","totalBytes","error","console","log","getDownloadURL","url","updatePosProduct","removePosProduct","index","row","rows","$confirm","confirmButtonText","cancelButtonText","splice","catch","findPosProductById","doc","cancel","resetForm","popUpAdd","handleThumbImgRemove","popUpUpdate","created","subscribe","computed"],"mappings":"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","sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport firebase from 'firebase';\n\nconst Compress = require('compress.js')\nexport default {\n  meteor: {\n    langSession() {\n      return Session.get('lang') || \"en\";\n    },\n    disabledRemove() {\n      return Session.get(\"canRemove\");\n    },\n    disabledUpdate() {\n      return Session.get(\"canUpdate\");\n    },\n    newRe() {\n      let vm = this;\n      Pos_ProductReact.find({}).fetch();\n      vm.queryData(vm.searchData, vm.skip, vm.currentSize + vm.skip);\n    },\n    isCoffee() {\n      let ma = Manage_Module.findOne();\n      if (ma && ma.feature) {\n        return (ma.feature.indexOf(\"Coffee\") > -1 ? true : false) || (ma.feature.indexOf(\"Restaurant\") > -1 ? true : false);\n      }\n\n      return false;\n    }\n  },\n  mounted() {\n    this.$jQuery('body').off();\n    this.$jQuery('body').on('focus', 'input[type=number]', function (e) {\n      $(this).on('wheel', function (e) {\n        e.preventDefault();\n      });\n    });\n  },\n  data() {\n    return {\n      newLoading: true,\n      dialogImageUrl: \"\",\n      dialogVisible: false,\n      isloadingImage: false,\n      thumbImgCroppa: null,\n      imgUrl: \"\",\n      imgUrlUpdate: \"\",\n      refForm: \"\",\n      posProductData: [],\n      loading: false,\n      searchData: '',\n      isSearching: false,\n      currentPage: 1,\n      currentSize: 10,\n      count: 0,\n      dialogAddPosProduct: false,\n      dialogUpdatePosProduct: false,\n\n      posProductForm: {\n        name: \"\",\n        khName: \"\",\n        code: \"\",\n        description: \"\",\n        categoryId: \"\",\n        productType: \"Inventory\",\n        isTaxable: false,\n        qtyOnHand: 0,\n        whPrice: 0,\n        rePrice: 0,\n        cost: 0,\n        _id: \"\",\n        minimumStock: \"\",\n        barcode: \"\",\n        unitId: \"\",\n        status: false\n      },\n      rules: {\n        name: [{required: true, message: 'Please input name', trigger: 'blur'}],\n        unitId: [{required: true, message: 'Please input Unit', trigger: 'change'}],\n        categoryId: [{required: true, message: 'Please input Category', trigger: 'change'}],\n        code: [{required: true, message: 'Please input code', trigger: 'blur'}],\n      },\n      categoryDataOption: [],\n      unitDataOption: [],\n      productpTypeOption: [\n        {label: \"Inventory\", value: \"Inventory\"},\n        // {label: \"Non Inventory\", value: \"Non Inventory\"},\n        {label: \"Service\", value: \"Service\"},\n        // {label: \"Bundle\", value: \"Bundle\"}\n      ],\n      skip: 0,\n      uploadValue: 0,\n      selectedFile: ''\n    }\n  },\n  watch: {\n    currentSize(val) {\n      this.isSearching = true;\n      this.skip = (this.currentPage - 1) * val;\n      this.queryData(this.searchData, this.skip, val + this.skip);\n    },\n    currentPage(val) {\n      this.isSearching = true;\n      this.skip = (val - 1) * this.currentSize;\n      this.queryData(this.searchData, this.skip, this.currentSize + this.skip);\n    },\n    searchData(val) {\n      this.isSearching = true;\n      this.skip = (this.currentPage - 1) * this.currentSize;\n      this.queryData(val, this.skip, this.currentSize + this.skip);\n    },\n    \"posProductForm.categoryId\"(val) {\n      let vm = this;\n      if (this.refForm === \"posProductFormAdd\") {\n        Meteor.call(\"getProductCodeByCateogry\", val,Constants.secret,  (err, result) => {\n          if (!err) {\n            vm.posProductForm.code = result;\n          }\n        })\n      }\n    },\n    'thumbImgCroppa.loading'(val) {\n      if (!val) {\n        this.generateThumbImgUrl();\n      }\n    }\n  },\n  methods: {\n    onFileSelected(e) {\n      let vm = this;\n      this.imgUrl = window.URL.createObjectURL(e.target.files[0]);\n      /* Meteor.setTimeout(function () {\n         vm.onUpload();\n       }, 500);*/\n      let tmpFile = [...e.target.files];\n      const compress = new Compress();\n      compress.compress(tmpFile, {\n        size: 4, // the max size in MB, defaults to 2MB\n        quality: 0.6, // the quality of the image, max is 1,\n        maxWidth: 1920, // the max width of the output image, defaults to 1920px\n        maxHeight: 1920, // the max height of the output image, defaults to 1920px\n        resize: true // defaults to true, set false if you do not want to resize the image width and height\n      }).then((data) => {\n        data.forEach((obj) => {\n          let img1 = obj;\n          let base64str = img1.data;\n          let imgExt = img1.ext;\n          this.selectedFile = Compress.convertBase64ToFile(base64str, imgExt), obj.alt.split(\".\")[0];\n        })\n      })\n    },\n    handleSizeChange(val) {\n      this.currentSize = val;\n    },\n    handleCurrentChange(val) {\n      this.currentPage = val;\n    },\n    queryData: _.debounce(function (val, skip, limit) {\n      this.newLoading = true;\n      Meteor.call('queryPosProduct', {\n        q: val,\n        filter: this.filter,\n        options: {skip: skip || 0, limit: limit || 10},\n        accessToken:Constants.secret,\n      }, (err, result) => {\n        if (!err) {\n          this.posProductData = result.content;\n          this.count = result.countPosProduct;\n        }\n        this.isSearching = false;\n        this.newLoading = false;\n      });\n    }, 300),\n\n    queryCategoryDataOption() {\n      let selector = {};\n      let vm = this;\n      Meteor.call(\"queryCategoryOption\", selector, Constants.secret, (err, result) => {\n        if (result) {\n          vm.categoryDataOption = result;\n        }\n      })\n    },\n    queryUnitDataOption() {\n      let selector = {};\n      let vm = this;\n      Meteor.call(\"queryPosUnitOption\", selector, Constants.secret, (err, result) => {\n        if (result) {\n          vm.unitDataOption = result;\n        }\n      })\n    },\n    savePosProduct(event) {\n      event.preventDefault();\n      let vm = this;\n      this.$refs[\"posProductFormAdd\"].validate((valid) => {\n        if (valid) {\n\n          let imageId = \"\";\n          let imagePath = \"\";\n          if (!!vm.selectedFile) {\n            /*const upload = Images.insert({\n                file: vm.imgUrl,\n                streams: 'dynamic',\n                chunkSize: 'dynamic'\n            }, false);\n\n            upload.on('start', function (error, result) {\n                if (error) {\n                    console.log(error.message);\n                }\n            })\n\n            upload.on('end', function (error, fileObj) {\n                if (error) {\n                    console.log(error.message);\n                } else {\n                    imageId = fileObj._id;\n                    imagePath = fileObj._downloadRoute + \"/\" + fileObj._collectionName + \"/\" + fileObj._id + \"/original/\" + fileObj._id + fileObj.extensionWithDot;\n\n                    let posProductDoc = {\n                        code: vm.posProductForm.code,\n                        name: vm.posProductForm.name,\n                        khName: vm.posProductForm.khName,\n                        productType: vm.posProductForm.productType,\n                        categoryId: vm.posProductForm.categoryId,\n                        whPrice: vm.posProductForm.whPrice,\n                        rePrice: vm.posProductForm.rePrice,\n                        cost: vm.posProductForm.cost,\n                        qtyOnHand: vm.posProductForm.qtyOnHand,\n                        isTaxable: vm.posProductForm.isTaxable,\n                        description: vm.posProductForm.description,\n                        minimumStock: vm.posProductForm.minimumStock,\n                        unitId: vm.posProductForm.unitId,\n                        barcode: vm.posProductForm.barcode,\n                        status: vm.posProductForm.status,\n                        imageId: imageId,\n                        imagePath: imagePath\n\n                    };\n\n                    Meteor.call(\"insertPosProduct\", posProductDoc, (err, result) => {\n                        if (!err) {\n                            vm.$message({\n                                duration: 1000,\n                                message: `Save Successfully!`,\n                                type: 'success'\n                            });\n                            vm.dialogAddPosProduct = false;\n                            vm.queryCategoryDataOption();\n                            if (vm.$refs[\"posProductFormAdd\"]) {\n                                vm.$refs[\"posProductFormAdd\"].resetFields();\n                            }\n\n                            //Image\n\n                            if (vm.imgUrl) {\n                                //const storageRef = firebase.storage().ref(`${this.imageData.name}`).put(vm.imgUrl);\n                                const storageRef = firebase.storage().ref(\"pic1\").put(vm.imgUrl);\n                                storageRef.on(`state_changed`, snapshot => {\n                                        this.uploadValue = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                                    }, error => {\n                                        console.log(error.message)\n                                    },\n                                    () => {\n                                        this.uploadValue = 100;\n                                        storageRef.snapshot.ref.getDownloadURL().then((url) => {\n                                            console.log(url);\n                                        });\n                                    }\n                                );\n                            }\n\n\n                            /!*if (vm.imgUrl) {\n                                const storageRef = storagePath.fileImage(fileImage, Meteor.userId(), result, \"category\");\n                                let uploadTask = storageRef\n                                    .child(\"fileImage\")\n                                    .putString(vm.imgUrl, \"data_url\");\n                                uploadTask.on(\n                                    \"state_changed\",\n                                    function (snapshot) {\n                                        // Observe state change events such as progress, pause, and resume\n                                        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n                                        let progress =\n                                            snapshot.bytesTransferred / snapshot.totalBytes * 100;\n                                        console.log(\"Upload is \" + progress + \"% done\");\n                                        switch (snapshot.state) {\n                                            case firebase.storageState.PAUSED: // or 'paused'\n                                                console.log(\"Upload is paused\");\n                                                break;\n                                            case firebase.storageState.RUNNING: // or 'running'\n                                                console.log(\"Upload is running \" + progress);\n                                                break;\n                                        }\n                                    },\n                                    function (error) {\n                                        /!*setTimeout(() => {\n                                            loading.close();\n                                        }, 1000)*!/\n                                    },\n                                    function () {\n                                        uploadTask.snapshot.ref.getDownloadURL()\n                                            .then(url => {\n                                                console.log(url);\n                                                Meteor.call('sch_updateProductImageURlById', result, url, (err, re) => {\n                                                    if (err) {\n                                                        console.log(err.message);\n                                                    } else {\n                                                        vm.thumbImgCroppa = null;\n                                                    }\n                                                });\n                                            }).catch(err => console.log(err));\n                                    });\n                            }*!/\n\n\n                            // /Image\n\n\n                        } else {\n                            vm.$message({\n                                duration: 1000,\n                                message: err.message,\n                                type: 'error'\n                            });\n                        }\n                    })\n\n                }\n            })\n\n            //upload.start();*/\n\n\n            let posProductDoc = {\n              code: vm.posProductForm.code,\n              name: vm.posProductForm.name,\n              khName: vm.posProductForm.khName,\n              productType: vm.posProductForm.productType,\n              categoryId: vm.posProductForm.categoryId,\n              whPrice: vm.posProductForm.whPrice,\n              rePrice: vm.posProductForm.rePrice,\n              cost: vm.posProductForm.cost,\n              qtyOnHand: vm.posProductForm.qtyOnHand,\n              isTaxable: vm.posProductForm.isTaxable,\n              description: vm.posProductForm.description,\n              minimumStock: vm.posProductForm.minimumStock,\n              barcode: vm.posProductForm.barcode,\n              status: vm.posProductForm.status,\n              unitId: vm.posProductForm.unitId\n\n            };\n\n            Meteor.call(\"insertPosProduct\", posProductDoc,Constants.secret,  (err, result) => {\n              if (!err) {\n                vm.$message({\n                  duration: 1000,\n                  message: `Save Successfully!`,\n                  type: 'success'\n                });\n                vm.dialogAddPosProduct = false;\n                vm.queryCategoryDataOption();\n                if (vm.$refs[\"posProductFormAdd\"]) {\n                  vm.$refs[\"posProductFormAdd\"].resetFields();\n                }\n\n\n                if (!!vm.selectedFile && result) {\n                  //const storageRef = firebase.storage().ref(`${this.imageData.name}`).put(vm.imgUrl);\n\n                  const storageRef = firebase.storage().ref(\"product\" + result).put(vm.selectedFile);\n                  storageRef.on(`state_changed`, snapshot => {\n                        this.uploadValue = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                      }, error => {\n                        console.log(error.message)\n                      },\n                      () => {\n                        this.uploadValue = 100;\n                        storageRef.snapshot.ref.getDownloadURL().then((url) => {\n                          Meteor.call(\"updatePosProductImage\", result, url,Constants.secret,  (err, result) => {\n                            if (err) {\n                              console.log(err.message);\n                            }\n                            vm.selectedFile = \"\";\n                          })\n                        });\n                      }\n                  );\n                }\n              } else {\n                vm.$message({\n                  duration: 1000,\n                  message: err.message,\n                  type: 'error'\n                });\n              }\n            })\n\n\n          } else {\n            let posProductDoc = {\n              code: vm.posProductForm.code,\n              name: vm.posProductForm.name,\n              khName: vm.posProductForm.khName,\n              productType: vm.posProductForm.productType,\n              categoryId: vm.posProductForm.categoryId,\n              whPrice: vm.posProductForm.whPrice,\n              rePrice: vm.posProductForm.rePrice,\n              cost: vm.posProductForm.cost,\n              qtyOnHand: vm.posProductForm.qtyOnHand,\n              isTaxable: vm.posProductForm.isTaxable,\n              description: vm.posProductForm.description,\n              minimumStock: vm.posProductForm.minimumStock,\n              barcode: vm.posProductForm.barcode,\n              status: vm.posProductForm.status,\n              unitId: vm.posProductForm.unitId\n\n            };\n\n            Meteor.call(\"insertPosProduct\", posProductDoc,Constants.secret,  (err, result) => {\n              if (!err) {\n                vm.$message({\n                  duration: 1000,\n                  message: `Save Successfully!`,\n                  type: 'success'\n                });\n                vm.dialogAddPosProduct = false;\n                vm.queryCategoryDataOption();\n                if (vm.$refs[\"posProductFormAdd\"]) {\n                  vm.$refs[\"posProductFormAdd\"].resetFields();\n                }\n              } else {\n                vm.$message({\n                  duration: 1000,\n                  message: err.message,\n                  type: 'error'\n                });\n              }\n            })\n          }\n        }\n      })\n\n    },\n    updatePosProduct() {\n      let vm = this;\n      this.$refs[\"posProductFormUpdate\"].validate((valid) => {\n        if (valid) {\n          if (!!vm.selectedFile) {\n            /*const upload = Images.insert({\n                file: vm.imgUrl,\n                streams: 'dynamic',\n                chunkSize: 'dynamic'\n            }, false);\n\n            upload.on('start', function (error, result) {\n                if (error) {\n                    console.log(error.message);\n                }\n            })\n\n            upload.on('end', function (error, fileObj) {\n                if (error) {\n                    console.log(error.message);\n                } else {\n                    let imageId = fileObj._id;\n                    let imagePath = fileObj._downloadRoute + \"/\" + fileObj._collectionName + \"/\" + fileObj._id + \"/original/\" + fileObj._id + fileObj.extensionWithDot;\n\n                    let posProductDoc = {\n                        _id: vm.posProductForm._id,\n                        code: vm.posProductForm.code,\n                        name: vm.posProductForm.name,\n                        khName: vm.posProductForm.khName,\n                        productType: vm.posProductForm.productType,\n                        categoryId: vm.posProductForm.categoryId,\n                        whPrice: vm.posProductForm.whPrice,\n                        rePrice: vm.posProductForm.rePrice,\n                        cost: vm.posProductForm.cost,\n                        qtyOnHand: vm.posProductForm.qtyOnHand,\n                        isTaxable: vm.posProductForm.isTaxable,\n                        description: vm.posProductForm.description,\n                        minimumStock: vm.posProductForm.minimumStock,\n                        unitId: vm.posProductForm.unitId,\n                        barcode: vm.posProductForm.barcode,\n                        status: vm.posProductForm.status,\n\n\n                        imageId: imageId,\n                        imagePath: imagePath\n                    };\n\n                    Meteor.call(\"updatePosProduct\", posProductDoc, (err, result) => {\n                        if (!err) {\n                            vm.$message({\n                                duration: 1000,\n                                message: `\n        Update\n        Successfully\n        !`,\n                                type: 'success'\n                            });\n                            vm.dialogUpdatePosProduct = false;\n                            vm.queryCategoryDataOption();\n                            if (vm.$refs[\"posProductFormUpdate\"]) {\n                                vm.$refs[\"posProductFormUpdate\"].resetFields();\n                            }\n                        } else {\n                            vm.$message({\n                                duration: 1000,\n                                message: `\n        Update\n        Failed\n        !`,\n                                type: 'error'\n                            });\n                        }\n                    })\n\n                }\n            })\n\n            upload.start();*/\n\n            let posProductDoc = {\n              _id: vm.posProductForm._id,\n              code: vm.posProductForm.code,\n              name: vm.posProductForm.name,\n              khName: vm.posProductForm.khName,\n              productType: vm.posProductForm.productType,\n              categoryId: vm.posProductForm.categoryId,\n              whPrice: vm.posProductForm.whPrice,\n              rePrice: vm.posProductForm.rePrice,\n              cost: vm.posProductForm.cost,\n              qtyOnHand: vm.posProductForm.qtyOnHand,\n              isTaxable: vm.posProductForm.isTaxable,\n              description: vm.posProductForm.description,\n              barcode: vm.posProductForm.barcode,\n              minimumStock: vm.posProductForm.minimumStock,\n              status: vm.posProductForm.status,\n\n              unitId: vm.posProductForm.unitId\n            };\n\n            Meteor.call(\"updatePosProduct\", posProductDoc,Constants.secret,  (err, result) => {\n              if (!err) {\n                vm.$message({\n                  duration: 1000,\n                  message: `\n                        Update\n                        Successfully\n                        !`,\n                  type: 'success'\n                });\n                vm.dialogUpdatePosProduct = false;\n                vm.queryCategoryDataOption();\n                if (vm.$refs[\"posProductFormUpdate\"]) {\n                  vm.$refs[\"posProductFormUpdate\"].resetFields();\n                }\n\n\n                if (!!vm.selectedFile && vm.posProductForm._id) {\n                  //const storageRef = firebase.storage().ref(`${this.imageData.name}`).put(vm.imgUrl);\n                  const storageRef = firebase.storage().ref(\"product\" + vm.posProductForm._id).put(vm.selectedFile);\n                  storageRef.on(`state_changed`, snapshot => {\n                        this.uploadValue = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                      }, error => {\n                        console.log(error.message)\n                      },\n                      () => {\n                        this.uploadValue = 100;\n                        storageRef.snapshot.ref.getDownloadURL().then((url) => {\n                          Meteor.call(\"updatePosProductImage\", vm.posProductForm._id, url, Constants.secret, (err, result) => {\n                            if (err) {\n                              console.log(err.message);\n                            }\n                            vm.selectedFile = \"\";\n                          })\n                        });\n                      }\n                  );\n                }\n              } else {\n                vm.$message({\n                  duration: 1000,\n                  message: `\n                        Update\n                        Failed\n                        !`,\n                  type: 'error'\n                });\n              }\n            })\n\n\n          } else {\n\n\n            let posProductDoc = {\n              _id: vm.posProductForm._id,\n              code: vm.posProductForm.code,\n              name: vm.posProductForm.name,\n              khName: vm.posProductForm.khName,\n              productType: vm.posProductForm.productType,\n              categoryId: vm.posProductForm.categoryId,\n              whPrice: vm.posProductForm.whPrice,\n              rePrice: vm.posProductForm.rePrice,\n              cost: vm.posProductForm.cost,\n              qtyOnHand: vm.posProductForm.qtyOnHand,\n              isTaxable: vm.posProductForm.isTaxable,\n              description: vm.posProductForm.description,\n              barcode: vm.posProductForm.barcode,\n              minimumStock: vm.posProductForm.minimumStock,\n              status: vm.posProductForm.status,\n\n              unitId: vm.posProductForm.unitId\n            };\n\n            Meteor.call(\"updatePosProduct\", posProductDoc,Constants.secret,  (err, result) => {\n              if (!err) {\n                vm.$message({\n                  duration: 1000,\n                  message: `\n                        Update\n                        Successfully\n                        !`,\n                  type: 'success'\n                });\n                vm.dialogUpdatePosProduct = false;\n                vm.queryCategoryDataOption();\n                if (vm.$refs[\"posProductFormUpdate\"]) {\n                  vm.$refs[\"posProductFormUpdate\"].resetFields();\n                }\n              } else {\n                vm.$message({\n                  duration: 1000,\n                  message: `\n                        Update\n                        Failed\n                        !`,\n                  type: 'error'\n                });\n              }\n            })\n          }\n        }\n      })\n\n    },\n    removePosProduct(index, row, rows) {\n      let vm = this;\n      this.$confirm('This will permanently delete the Item. Continue?', 'Warning', {\n        confirmButtonText: 'OK',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      }).then(() => {\n        Meteor.call(\"removePosProduct\", row._id, row.imageId,Constants.secret,  (err, result) => {\n          if (!err) {\n            rows.splice(index, 1);\n\n            vm.$message({\n              message: `\n                        លុប ${row.code} : ${row.name} បានជោគជ័យ`,\n              type: 'success'\n            });\n\n            vm.queryCategoryDataOption();\n          } else {\n            vm.$message({\n              type: 'error',\n              message: 'Delete Fialed'\n            });\n          }\n\n        })\n\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: 'Delete canceled'\n        });\n      });\n\n\n    },\n    findPosProductById(doc) {\n      let vm = this;\n      vm.posProductForm = {};\n\n      Meteor.call(\"queryPosProductById\", doc.row._id, Constants.secret, (err, result) => {\n        if (result) {\n          vm.posProductForm._id = result._id;\n          vm.posProductForm = result;\n          vm.imgUrl = result.imagePath || \"\";\n          this.queryCategoryDataOption();\n        }\n      })\n    },\n    cancel() {\n      this.$message({\n        type: 'info',\n        message: 'Canceled'\n      });\n    },\n    resetForm() {\n      this.posProductForm._id = \"\";\n      this.refForm = \"\";\n      this.queryCategoryDataOption();\n      if (this.$refs[\"posProductFormAdd\"]) {\n        this.$refs[\"posProductFormAdd\"].resetFields();\n      }\n\n      if (this.$refs[\"posProductFormUpdate\"]) {\n        this.$refs[\"posProductFormUpdate\"].resetFields();\n      }\n\n    },\n    popUpAdd() {\n      this.refForm = \"posProductFormAdd\";\n      this.handleThumbImgRemove();\n    },\n    popUpUpdate() {\n      this.refForm = \"posProductFormUpdate\";\n\n\n    },\n\n  },\n  created() {\n    this.isSearching = true;\n    this.queryCategoryDataOption();\n    this.queryUnitDataOption();\n    this.queryData();\n    Meteor.subscribe('Pos_ProductReact');\n\n  },\n  computed: {\n\n  }\n}\n"]},"sourceType":"script","hash":"b1d438dbb8ba5f0ae5a88af9fa1a8387caacf1aa"}
